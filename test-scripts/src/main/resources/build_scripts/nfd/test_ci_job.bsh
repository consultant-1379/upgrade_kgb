#!/bin/bash
#------------------------------------------------------------------------
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#------------------------------------------------------------------------
#########################################################################
# History
# 02/04/2012    edavmax         First version
# 20/01/2013	eeidle		re-written version for OSS Installations
# test comment

usage() {
cat << EOF

Usage:  ${G_SCRIPTNAME} -f <Test env file> [-h] [-k]

-f path to env file

This script is called by the Jenkins server. It performs the following actions:

1/ builds a test harness tarball
2/ Copies software to servers defined in <Test env file>
3/ Installs software on servers defined in <Test env file>
4/ Starts the execution of the test harness script.
5/ Copies test results from target server to Jenkins server.


EOF

return 0

}

# function to read server env file

read_envfile() {
	#echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}" 
	unset CI_SERVER_HOSTNAME
	unset CI_SERVER_IP
	unset CI_SERVER_INST_TYPE
	unset CI_SERVER_CONFIG
        
	if [ ! -s "${G_CIBUILDENVFILE}" ]; then
		echo "${G_SCRIPTNAME}: Error - failed to find test env file"
		return 1
	fi
	echo "${G_SCRIPTNAME}  ${LINENO}: Parsing ${G_CIBUILDENVFILE}"
  	. ${G_CIBUILDENVFILE}

        if [ -z "${G_TEST_HARNESS_COMMAND}" ]; then
	        echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: ERROR: Required variable G_TEST_HARNESS_COMMAND  not specified or invalid in ${G_CIBUILDENVFILE}"
		return 1
	fi
        if [ -z "${G_HARNESS_HOST}" ]; then
		G_HARNESS_HOST=${CI_SERVER_IP[0]}
	fi
	local l_reqpars="G_TEST_HARNESS_COMMAND"
	#for par in $l_reqpars; do
	#	[ -z "$(eval echo \$$par)" ] && {
	#		echo "Required parameter $par not specified or invalid in $G_CIBUILDENVFILE"
	#		l_missing=TRUE
	#	}
	#done

	[[ ${#CI_SERVER_HOSTNAME[@]} -eq 0 || ${#CI_SERVER_IP[@]} -eq 0 || ${#CI_SERVER_INST_TYPE[@]} -eq 0 || ${#CI_SERVER_CONFIG[@]} -eq 0 ]]  && l_missing=TRUE
	if [ "$l_missing" = TRUE ]; then
		echo "${G_SCRIPTNAME}: Error - required param missing from file $G_CIBUILDENVFILE"
		return 1
	fi

        get_harness_host || {
                echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: Error failed to find test harness host"
                return 1
        }
	return 0

}

# function to determine on which server the harness will be started

function get_harness_host() {
	echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}" 
	local l_count=0
        # validate value of $G_HARNESS_HOST"
        if [  ${G_HARNESS_HOST} != "localhost" ]; then
		
		while [ $l_count -lt ${#CI_SERVER_IP[@]} ]; do

			if [ TRUE ]; then
				echo "${G_SCRIPTNAME}  ${LINENO}: G_HARNESS_HOST=${CI_SERVER_IP[$l_count]}"
				G_HARNESS_HOST=${CI_SERVER_IP[$l_count]}
				echo "${G_SCRIPTNAME}  ${LINENO}: G_HARNESS_HOST_ROOTPW=${CI_SERVER_ROOTPW[$l_count]}"
				G_HARNESS_HOST_ROOTPW=${CI_SERVER_ROOTPW[$l_count]}
				break
			fi
				let l_count+=1
		done
	else 
		if  [[ ${G_HARNESS_HOST} == "localhost" ]]; then
			echo "${G_SCRIPTNAME}  ${LINENO}: G_HARNESS_HOST=${G_HARNESS_HOST}"
		fi
	fi
	
	[ -z "${G_HARNESS_HOST}" ] && return 1
	echo "${G_HARNESS_HOST}"
	return 0

}


# function to build  test harness
build_test_harness() {
        echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: Building test harness "
	#does staging exist? if so, remove existing staging software
        mkdir -p ${G_LOCAL_TAF_LOCATION} || { 
       		echo "${G_SCRIPTNAME} ${LINE}: Error - failed to create directory ${G_LOCAL_TAF_LOCATION} "
       		return 1
        }
	export G_PACKAGE_TGZFILE
	# if the build script returns false or tarfile does not exist then report error and exit.
        if ${G_PACKAGEBUILDSCRIPT}  ; then
                echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: Successfully built test harness"
                if [ ! -s ${G_PACKAGE_TGZFILE} ]; then
			echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: G_PACKAGE_TGZFILE=${G_PACKAGE_TGZFILE}"
                        echo "${G_SCRIPTNAME}: Failed to locate cominf software tarball"
                        return 1
                fi
        else
                echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: Failed to build test harness"
                return 1
        fi
        return 0
}

# Function to install cominf software on the test servers
install_software_on_localhost() {
	echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: Installing software on ${G_HARNESS_HOST}"
	if [ ! -s $G_PACKAGE_TGZFILE ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: Error unable to locate cominf software tarball"
		return 1
	fi
                
	# first we remove existing software 
	# check on args to rm -rf before executing. If var is blank could delete full server
	if [  -z "$G_INST_TYPE" ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: ${G_INST_TYPE} is empty...Exiting"
		return 1
        fi
	# ATROOT ==  ${WORKSPACE}/${G_BUILD_NUMBER}
        #G_LOCAL_TAF_LOCATION=${WORKSPACE}/${G_BUILD_NUMBER}
	if [  -z "${G_LOCAL_TAF_LOCATION}" ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: ${G_LOCAL_TAF_LOCATION} is empty...Exiting"
		return 1	
	fi
#	if [  -d "$G_LOCAL_TAF_LOCATION" ]; then
#		echo "${G_SCRIPTNAME} ${LINENO}: $G_LOCAL_TAF_LOCATION is empty...Exiting"
#		return 1	
#	fi
	echo "{G_HARNESS_HOST} == ${G_HARNESS_HOST} "
	if [  ${G_HARNESS_HOST} != "localhost" ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: Error with {G_HARNESS_HOST}=${G_HARNESS_HOST}"
		return 1
	fi
	#install software into staging area
 	echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: untar ${G_PACKAGE_TGZFILE} in ${WORKSPACE} "
	cd ${G_LOCAL_TAF_LOCATION} 
	gzip -cd ${G_PACKAGE_TGZFILE} | tar xvf - > /dev/null;
        if [ $? -ne 0 ]; then
                echo "${G_SCRIPTNAME}: ${LINENO}:Error - failed to unpack ${G_PACKAGE_TGZFILE} on $( hostname )"
                return 1
        fi
#	tar -xf $G_PACKAGE_TGZFILE || {
#		echo "${G_SCRIPTNAME} ${LINE}: Error - failed to untar G_PACKAGE_TGZFILE $G_PACKAGE_TGZFILE "
#		return 1
#	}
	# get env/preinirate files
    cp ${G_CIBUILDENVFILE} ${G_LOCAL_TAF_LOCATION} || {
	echo "${G_SCRIPTNAME} ${LINE}: Error - failed to copy {G_CIBUILDENVFILE} to  ${G_LOCAL_TAF_LOCATION} "
                return 1
        }
	
 	return 0	
		
}		
install_software_on_targetserver() {
	echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: Installing software on the test server"
	if [ ! -s $G_PACKAGE_TGZFILE ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: Error unable to locate cominf software tarball"
		return 1
	fi
	local l_count=0
#	while [ $l_count -lt ${#CI_SERVER_IP[@]} ]; do
		#let l_count+=1
		echo "${G_SCRIPTNAME}  ${LINENO}: Copying cominf software and installer to ${CI_SERVER_HOSTNAME[$l_count]}"
		# first we remove existing software 
		# check on args to rm -rf before executing. If var is blank could delete full server
		if [  -z "$G_INST_TYPE" ]; then
			echo "${G_SCRIPTNAME} ${LINENO}: ${G_INST_TYPE} is empty...Exiting"
			return 1
                fi
		if [  -z " $G_REMOTE_TAF_LOCATION" ]; then
			echo "${G_SCRIPTNAME} ${LINENO}: ${G_REMOTE_TAF_LOCATION} is empty...Exiting"
			return 1	
		fi
		echo "{G_HARNESS_HOST} == ${G_HARNESS_HOST} "
		
		# cleanup from previous test execution run before starting. 
		echo "${G_SCRIPTNAME} ${LINENO}: $G_SSH_SETUPSCRIPT ssh root@${CI_SERVER_IP[$l_count]} /bin/rm -rf ${G_REMOTE_TAF_LOCATION} ${CI_SERVER_ROOTPW[$l_count]}" 
		${G_SSH_SETUPSCRIPT} ssh "root@${CI_SERVER_IP[$l_count]} /bin/rm -rf ${G_REMOTE_TAF_LOCATION}" ${CI_SERVER_ROOTPW[$l_count]}  || { echo "${G_SCRIPTNAME} ${LINENO}:Error with /bin/rm -rf ${G_REMOTE_TAF_LOCATION}. "; return 1; }
		# create  $G_REMOTE_TAF_LOCATION directory on remote server
		$G_SSH_SETUPSCRIPT ssh "root@${CI_SERVER_IP[$l_count]} mkdir -p $G_REMOTE_TAF_LOCATION" ${CI_SERVER_ROOTPW[$l_count]} > /dev/null || {

			echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to ssh root@${CI_SERVER_IP[$l_count]} mkdir -p $G_REMOTE_TAF_LOCATION  ${CI_SERVER_ROOTPW[$l_count]}"

			return 1
		}
		
		# copy software to remote server
		echo "${G_SCRIPTNAME}:	$G_SSH_SETUPSCRIPT scp $G_PACKAGE_TGZFILE root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION ${CI_SERVER_ROOTPW[$l_count]} "
		$G_SSH_SETUPSCRIPT scp "$G_PACKAGE_TGZFILE root@${CI_SERVER_IP[$l_count]}:/$G_REMOTE_TAF_LOCATION" ${CI_SERVER_ROOTPW[$l_count]} > /dev/null 2>&1 || {

			echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to copy $G_PACKAGE_TGZFILE cominf software to  root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION "

			return 1
		
		}
		# copy the $G_SSH_SETUPSCRIPT install script to the remote server
		$G_SSH_SETUPSCRIPT scp "$G_SSH_SETUPSCRIPT root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION" ${CI_SERVER_ROOTPW[$l_count]} > /dev/null 2>&1 || {
			echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to copy $G_SSH_SETUPSCRIPT script to root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION"
			return 1
		}
		
		# copy the remote install script to the remote server
		$G_SSH_SETUPSCRIPT scp "$G_REMOTEINSTALLSCRIPT root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION" ${CI_SERVER_ROOTPW[$l_count]} > /dev/null 2>&1 || {
			echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to copy cominf installer script to root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION"
			return 1
		}
		# start the remote install scripte on the remote server to unpack the test harness and test cases
		$G_SSH_SETUPSCRIPT ssh "root@${CI_SERVER_IP[$l_count]}  $G_REMOTE_TAF_LOCATION/$G_REMOTEINSTALLSCRIPTNAME -c ${CI_SERVER_CONFIG[$l_count]} -i ${CI_SERVER_INST_TYPE[$l_count]}" ${CI_SERVER_ROOTPW[$l_count]} || {
			echo "${G_SCRIPTNAME} ${LINENO}: Error - $G_REMOTE_TAF_LOCATION/$G_REMOTEINSTALLSCRIPTNAME  script failed on server ${CI_SERVER_HOSTNAME[$l_count]}"
			return 1
		}
		# copy over the G_CIBUILDENVFILE for test cases that validate against inputs in this file
		$G_SSH_SETUPSCRIPT scp "$G_CIBUILDENVFILE root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION/${CI_SERVER_HOSTNAME[$l_count]}.env" ${CI_SERVER_ROOTPW[$l_count]}  || {
                        echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to copy $G_CIBUILDENVFILE to root@${CI_SERVER_IP[$l_count]}:$G_REMOTE_TAF_LOCATION"
                        return 1
                }

		let l_count+=1
#	done
	return 0
}

#funtion to start the test harness on (atcominf.bsh) remotely on the target server
start_remote_test_harness() {
	echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: starting test harness on $G_HARNESS_HOST!"
	if [ -z "$G_HARNESS_HOST" ]; then	
		echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: Unable to determine server on which to start harness"
		return 1
	fi
	TESTHARNESS_COMMAND=${G_REMOTE_TAF_LOCATION}/${G_TEST_HARNESS_COMMAND}
	echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: $G_SSH_SETUPSCRIPT ssh root@$G_HARNESS_HOST $TESTHARNESS_COMMAND $G_HARNESS_HOST_ROOTPW"
	#for test suite jenkins logfile must show :spawn ssh root@10.45.224.16 /var/tmp/platform_taf//harness/bin/atharness.bsh -s 'eeidle_test1 eeidle_test2' -j 1358959594 -S
	#eval '$G_SSH_SETUPSCRIPT ssh "root@$G_HARNESS_HOST $TESTHARNESS_COMMAND" $G_HARNESS_HOST_ROOTPW'
	$G_SSH_SETUPSCRIPT ssh "root@$G_HARNESS_HOST $TESTHARNESS_COMMAND" $G_HARNESS_HOST_ROOTPW
	G_HARNESS_RETCODE=$?
	if [ $G_HARNESS_RETCODE -ne 0 ]; then
		echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}:Warning - Error with root@$G_HARNESS_HOST $TESTHARNESS_COMMAND  returned code ${G_HARNESS_RETCODE}"
		return $G_HARNESS_RETCODE
	fi
 	return 0	
}
#funtion to start the test harness on (atcominf.bsh) locally on the jenkins slave server
#returns the number of failed callbacks, but needs to be fixed to ERROR correctly when harness actually fails to execute
start_local_test_harness() {
	echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: starting test harness on $G_HARNESS_HOST!"
	# start the harness on the remote server
	if [[ $G_HARNESS_HOST == "localhost" ]];then
			echo "{G_TEST_HARNESS_COMMAND} =  ${WORKSPACE}/${G_BUILD_NUMBER}/${G_TEST_HARNESS_COMMAND}"
		# ATROOT ==  ${WORKSPACE}/${G_BUILD_NUMBER}
		# need eval to deal with the quotes in the env file for ${G_TEST_HARNESS_COMMAND}
		MYPWD=$(pwd)
		echo "cwd = $MYPWD"
		echo " ${WORKSPACE}/${G_BUILD_NUMBER}/${G_TEST_HARNESS_COMMAND}"
		eval ${WORKSPACE}/${G_BUILD_NUMBER}/${G_TEST_HARNESS_COMMAND}
		G_HARNESS_RETCODE=$?
		if [ $G_HARNESS_RETCODE -ne 0 ]; then
			 echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}:Warning - ${WORKSPACE}/${G_BUILD_NUMBER}/$G_TEST_HARNESS_COMMAND on $(hostname) returned code ${G_HARNESS_RETCODE}"
			 return $G_HARNESS_RETCODE
		fi
	else
		# tbd 
		echo "${G_SCRIPTNAME} ${FUNC_NAME} ${LINENO}: ERROR - test harness not on localhost"
		return 1
	fi
	return 0

}

checkBuildEnvironmentFile() {
    	#echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO}: checking build env file"

	#echo "G_CIBUILDENVFILE=$G_CIBUILDENVFILE"
	if [ ! -s "$G_CIBUILDENVFILE" ]; then
		echo "${G_SCRIPTNAME}: Error - unable to find env file or file empty"
		usage
		exit 1
	fi
}

# function to copy the results of the test harness back to the CI server
#results file is a tar.gz file with the following format
# ${BUILD_NUMBER}/index.html
copy_test_results() {
	# make directory for harness results if needed
	echo "${G_SCRIPTNAME} ${LINENO}: copying results of test harness to CI server ${HOSTNAME}"
	mkdir -p ${G_LOCAL_TEST_HARNESS_RESULTS_DIR} || {
		echo "${G_SCRIPTNAME} ${LINE}: Error - failed to create directory $G_LOCAL_TEST_HARNESS_RESULTS_DIR"
		return 1                                            
	}
	cd $G_LOCAL_TEST_HARNESS_RESULTS_DIR
	pwd
	echo "$PWD :eeidle: $(ls -lart)"
	echo "hostname =$(hostname)"
	# copy test harness results back to CI server
	echo "${G_SCRIPTNAME} ${LINENO}: $G_SSH_SETUPSCRIPT scp root@$G_HARNESS_HOST:$G_REMOTE_TEST_HARNESS_RESULTS_TGZ $G_LOCAL_TEST_HARNESS_RESULTS_DIR $G_HARNESS_HOST_ROOTPW" 
	#$G_SSH_SETUPSCRIPT scp "root@$G_HARNESS_HOST:$G_REMOTE_TEST_HARNESS_RESULTS_TGZ $G_LOCAL_TEST_HARNESS_RESULTS_DIR" $G_HARNESS_HOST_ROOTPW > /dev/null 2>&1 || {
	$G_SSH_SETUPSCRIPT scp "root@$G_HARNESS_HOST:$G_REMOTE_TEST_HARNESS_RESULTS_TGZ $G_LOCAL_TEST_HARNESS_RESULTS_DIR" $G_HARNESS_HOST_ROOTPW  || {
		echo "${G_SCRIPTNAME} ${LINENO}: Error - Failed to copy test harness results from $G_HARNESS_HOST  to CI server ${HOSTNAME}"
		return 11
	}
	# expand test results. hub defatult tar does not support -z option therefore explictly list path.
	cd $G_LOCAL_TEST_HARNESS_RESULTS_DIR
	/app/tar/1.22/bin/tar -zxf "$G_TEST_HARNESS_RESULTS_TARBALL" > /dev/null 2>&1 || {
		echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to unpack file $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL"
		echo "${G_SCRIPTNAME} ${LINENO}: Trying again with default tar"
		tar -zxf "$G_TEST_HARNESS_RESULTS_TARBALL" > /dev/null 2>&1 || {
			echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to unpack file $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL"
			return 1
		}
	} 
	# remove the tar file
	#/bin/rm -f "$G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL" || {
		#echo "${G_SCRIPTNAME} ${LINENO}: Warning - unable to delete local results tarball $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL"
	#}
	# rename directory back from a numerical id to a textual build it
	if [ -d $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_BUILD_NUMBER ]; then
		echo "${G_SCRIPTNAME} ${LINENO}: renaming directory $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_BUILD_NUMBER $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$BUILD_ID"
		mv $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_BUILD_NUMBER $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$BUILD_ID
		if [ $? -ne 0 ]; then
			echo "${G_SCRIPTNAME} ${LINENO}: Warning - mv failed"
		fi
	fi		
	return 0

}
untar_results() {
	#mv /var/tmp/reports/ci/$G_TEST_HARNESS_RESULTS_TARBALL $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL
	cd $G_LOCAL_TEST_HARNESS_RESULTS_DIR 
	ls -lart  $G_LOCAL_TEST_HARNESS_RESULTS_DIR 
	file $G_TEST_HARNESS_RESULTS_TARBALL
	#tar -zxf "$G_TEST_HARNESS_RESULTS_TARBALL" > /dev/null 2>&1 || {
	tar -zxf "$G_TEST_HARNESS_RESULTS_TARBALL"  || {
		echo "${G_SCRIPTNAME} ${LINENO}: Error - failed to unpack file $G_LOCAL_TEST_HARNESS_RESULTS_DIR/$G_TEST_HARNESS_RESULTS_TARBALL"
		return 1
	} 
	return 0

}
rename_results_directory() {
	
	echo "${G_SCRIPTNAME} ${LINE}: renaming results directory."
	echo "$G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$G_BUILD_NUMBER"
	if [ -d $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$G_BUILD_NUMBER ]; then
                echo "${G_SCRIPTNAME} ${LINENO}: renaming directory $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$G_BUILD_NUMBER $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$BUILD_ID"
                mv $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$G_BUILD_NUMBER $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$BUILD_ID 
                if [ $? -ne 0 ]; then
                        echo "${G_SCRIPTNAME} ${LINENO}: Warning - mv failed: mv $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$G_BUILD_NUMBER $G_LOCAL_TEST_HARNESS_RESULTS_DIR/ci/$BUILD_ID "
                fi
	fi
	return 0
}
########################################################
### Function: getBuildNumber  ##########################
# Purpose : This function generates an integer         #
#           representation of the jenkins variable     #
#           $BUILD_ID and stores it in G_BUILD_NUMBER. #
#           if ${G_SCRIPTNAME} is ran manually from    #
#           cli then this function provides a          #
#	    job id calculated by subtracting           #
#           -1350487300 from current time in seconds.  #
#           atcominf script uses this variable for     #
#           its job id.
# Arguments :                                          #
# none                                                 #
########################################################
getBuildNumber() {

	# if we cant get Jenkins build number then
	# issue warning and continue with assumption that script is called from command line.
	#$BUILD_ID will be blank when ran via command line
	if [ -z "$BUILD_ID" ]; then
		echo "${G_SCRIPTNAME}: Warning - unable to determine CI build ID - using ${G_BUILD_NUMBER}-1350487300 as CI build ID"
		G_BUILD_NUMBER=`date +%s`
		let G_BUILD_NUMBER=${G_BUILD_NUMBER}-1350487300  
	else
                # date command is limited on solaris so process G_BUILDNUMBER differently.
                if [ "$(uname)" == "Linux" ]; then
                        G_BUILD_NUMBER=`date --utc --date "$(echo ${BUILD_ID}  |sed 's/\(.*\)_\(.*\)/\1 \2/' | sed 's/-/:/3'| sed 's/-/:/3')" "+%s"`
                elif [ "$(uname)" == "SunOS" ]; then
                        G_BUILD_NUMBER=$(perl -e '{ $ENV{BUILD_ID} =~ s/_/-/g; ($year,$month,$day,$hour,$minute,$second) = split (/-/,$ENV{BUILD_ID});use Time::Local;$zzz=timelocal($second,$minute,$hour,$day,$month-1,$year);print "$zzz\n"; }')
                else
                        echo "${G_SCRIPTNAME}:ERROR - unknown Operating System"
                fi
        fi

	echo "${G_SCRIPTNAME} ${LINENO} G_BUILD_NUMBER=${G_BUILD_NUMBER} BUILD_ID=${BUILD_ID}"
}
########################################################
### Function: gitPullBuildRepo #########################
# Purpose : get the latest build scripts from the      #
#	    build repo.                                #
# Arguments :                                          #
# none                                                 #
########################################################
gitPullBuildRepo () {
# If DO_PULL is true then a git pull will be performed
# The newly pulled version of this script will then be executed and the exit
# code of the new script given as the exit of the original copy of the script
# DO_PULL is set to false in the new copy by the original script setting the -p flag
	if $DO_PULL; then
			cd $G_SCRIPTDIR

		if ! git pull; then
			echo "${G_SCRIPTNAME}: Error - failed to update git pull cominf_build repo"
			exit 1
		fi
		echo "0 = $0 @= $@"
		$0 -p $@
		exit $?
	fi
}
########################################################
### Function: initialiseSshKeys  #######################
# Purpose : prepare ssh keys and known hosts for ssh   #
#	    communication			       #
# Arguments :                                          #
# none                                                 #
########################################################
initialiseSshKeys() {
	# empty jenkins known_hosts
	echo "${G_SCRIPTNAME} ${FUNCNAME} ${LINENO} : ${FUNCNAME} function needs to be tidied up " 
	which ssh-keygen
	chmod 700 ~/.ssh     # temporarily enable write access to allow ssh-keygen -R to create a temporary file.	
	ssh-keygen -R ${CI_ADMIN1_IPV4_ADDRESS}
	ssh-keygen -R ${CI_ADMIN1_HOSTNAME}
	if [ ! -z "${CI_ADMIN2_HOSTNAME}" ]; then
		ssh-keygen -R ${CI_ADMIN2_HOSTNAME}
	ssh-keygen -R ${CI_ADMIN2_IPV4_ADDRESS}
	fi
	chmod 500 ~/.ssh	
        # check if gerrit SSH host key is in $HOME/.ssh/known_hosts
        egrep 'eselivm2v238l.lmera.ericsson.se..29418.*29418 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA37bYdj0bLVyuOL36TyeA0OqzWOE5gpFcKikb5RqtpHFqRo6175yfz6LZv83XSzq2dckS4Ja7wFjoXDu35LdwnCUsWCQU4vRLgLaMDoO6TxpIndi3K9yifcVODlbj66PmXBm0QhxqzzQIU0joJeG6JrqIsXJHXO9jcIZslyY9bnpk1L8toOKtW' ${HOME}/.ssh/known_hosts
        if [ $? -ne 0 ]; then

                # add Gerrit SSH host key if not present
                echo "[eselivm2v238l.lmera.ericsson.se]:29418,[150.132.181.143]:29418 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA37bYdj0bLVyuOL36TyeA0OqzWOE5gpFcKikb5RqtpHFqRo6175yfz6LZv83XSzq2dckS4Ja7wFjoXDu35LdwnCUsWCQU4vRLgLaMDoO6TxpIndi3K9yifcVODlbj66PmXBm0QhxqzzQIU0joJeG6JrqIsXJHXO9jcIZslyY9bnpk1L8toOKtW+N2fkgxDUBIr2cdFZ/UpvH00SmtvMJv1uAxvsDP+IzvqarLxt4quhRIB3y6ejUmbWXB+4ACxjkptUEaDA/2dwriBdWFpFuNCZmBLVVPZG/UU5aPRZ24eiiGKL0mN8hIwRlagCki5nBxkOe7yTo03vGmzqKUp3mAVw==" >> ${HOME}/.ssh/known_hosts || { echo "${G_SCRIPTNAME}:add Gerrit SSH host key to ${HOSTNAME} failed"; exit 1; }
                echo "${G_SCRIPTNAME}: updated ${HOME}/.ssh/known_hosts with  Gerrit SSH host key"
        fi

	egrep 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEA82p4kUftWChjjGNAewP/zOJnYgIc9rHFI\+tjK1gg7BJETC1oM34bUpJeVaQ5\+uHPWVZaLOagEmrBzRuj\+KRzR3ECzNduLVB1XbC4jZgeCLdJBBIaE74FqEJsIkyChW8n2M/l2EvE0Ia07va6gqziw7zReNxju9ryxtWxEaBm5Sc' ${HOME}/.ssh/known_hosts
	if [ $? -ne 0 ]; then
		# add MWS SSH host key
		echo "${G_MWS_IP} ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEA82p4kUftWChjjGNAewP/zOJnYgIc9rHFI+tjK1gg7BJETC1oM34bUpJeVaQ5+uHPWVZaLOagEmrBzRuj+KRzR3ECzNduLVB1XbC4jZgeCLdJBBIaE74FqEJsIkyChW8n2M/l2EvE0Ia07va6gqziw7zReNxju9ryxtWxEaBm5Sc="  >> ${HOME}/.ssh/known_hosts || { echo "${G_SCRIPTNAME}:add ${G_MWS_IP} SSH host key to ${HOSTNAME} failed"; exit 1; }
                echo "${G_SCRIPTNAME}: updated ${HOME}/.ssh/known_hosts with ${G_MWS_IP} SSH host key"
	fi
}

########################################################
### Function: valid_ip ##########################
# Purpose : Check that the given IP is valid IP or not.#
# Arguments :                                          #
# $1 - IP address, mandatory                           #
########################################################
valid_ip()
{
	local L_IP=$1
	local L_STAT=1
	echo $L_IP | grep "^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$" > /dev/null && {
			OIFS=$IFS
			IFS='.'
			set -f
			set -- $L_IP
			[[ $1 -le 255 && $2 -le 255 && $3 -le 255 && $4 -le 254 ]]
			L_STAT=$?
			IFS=$OIFS
			set +f
	}

	return $L_STAT
}




#MAIN
#source Global variables
export PATH=/app/git/1.7.8/LMWP3/bin:$PATH

DO_PULL=true
echo -e "\n\n** Job started **\n\n"

while getopts "hf:p" opt; do

	case $opt in
                p)
                        DO_PULL=false
		;;
		f)
			G_CIBUILDENVFILE=$OPTARG
        		if [ ! -s "$G_CIBUILDENVFILE" ]; then
                		echo "${G_SCRIPTNAME}: Error - failed to find test env file"
                		exit 1
        		fi
	
		;;
		h)
			usage
			exit 0
		;;
		?)      # Print usage and exit error
			printf "$( basename $0 ): ERROR: Invalid option: '${OPTARG}'.\n"
			usage
			exit 1
		;;

	esac
done
export hubuser=`eval whoami`
echo "script $0 running as $hubuser on $HOSTNAME"
getBuildNumber

G_SCRIPTDIR=$(cd $(/usr/bin/dirname $0); pwd)
# Source variables for this build
. ${G_SCRIPTDIR}/etc/build_scripts.ini

#G_SSH_SETUPSCRIPT=${G_SCRIPTDIR}/ssh_setup.exp
#G_SSH_SETUPSCRIPT=${G_SCRIPTDIR}/ssh_setup.sh
#G_SSH_SETUPSCRIPT_ORIG=${G_SCRIPTDIR}/ssh_setup.sh
#G_REMOTEINSTALLSCRIPTNAME=test_remote_install.bsh
#G_REMOTEINSTALLSCRIPT=$G_SCRIPTDIR/$G_REMOTEINSTALLSCRIPTNAME

# ATROOT ==  ${WORKSPACE}/${G_BUILD_NUMBER}
#G_LOCAL_TAF_LOCATION=${WORKSPACE}/${G_BUILD_NUMBER}
#taking out below for hub
#gitPullBuildRepo $@
checkBuildEnvironmentFile 
read_envfile || exit 1
initialiseSshKeys

build_test_harness || exit 1

# 	Do you want to run Harness on test control server ($G_HARNESS_HOST=localhost) (e.g. jenkins slave) 
#	or on target server $G_HARNESS_HOST=<ip address of target>
if [[ $G_HARNESS_HOST == "localhost" ]]; then
	install_software_on_localhost || exit 1
	start_local_test_harness #|| exit 1
	# in local mode we don't need to use the reports tar.gz file we work off the original results
	rename_results_directory
	export G_LOCAL_TEST_HARNESS_RESULTS_DIR

else
	echo "G_REMOTE_TEST_HARNESS_DIR=$G_REMOTE_TEST_HARNESS_DIR"
	install_software_on_targetserver || exit 1	
    	start_remote_test_harness #|| exit 1
	echo "remote"
	copy_test_results || exit 1

fi


if [ $G_HARNESS_RETCODE -ne 0 ]; then
	echo "${G_SCRIPTNAME}: ** Test harness returned non-zero error code $G_HARNESS_RETCODE **"
	echo "${G_SCRIPTNAME}: ** Job failed **"
	exit 0 
else
	echo -e "\n\n** Job completed successfully **\n\n"
fi

exit 0





