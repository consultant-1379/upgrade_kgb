#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#f
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 08/07/2014	xkriski	dual offline orc_check_oss_roles returns 1 - no mc check - scenario for admin_pre_cutover_tasks.bsh

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
  
  echo "OK" > /ericsson/config/.admin_post_upgrade_tasks_status_file
  if [ $? -ne 0 ]
    then
        echo "Failed to create predecessor status file"
        return 110
    fi
  test -e /opt/ericsson/sck/bin/admin_pre_cutover_tasks.bsh
    if [ $? -ne 0 ]
    then
        echo "Script not found"
        return 111
    fi


  TMPDIR="24604_tmp"
  mkdir ${TMPDIR}
    if [ $? -ne 0 ]
    then
        echo "Unable to create temp script dir"
        return 112
    fi
  mkdir ${TMPDIR}/bin
  if [ $? -ne 0 ]
    then
        echo "Unable to create temp script bin dir"
        return 113
    fi
  mkdir ${TMPDIR}/lib
  if [ $? -ne 0 ]
    then
        echo "Unable to create temp script lib dir"
        return 114
    fi
  cp /opt/ericsson/sck/bin/admin_pre_cutover_tasks.bsh ${TMPDIR}/bin/
    if [ $? -ne 0 ]
    then
        echo "Unable to copy script to temp script bin dir"
        return 115
    fi
  
 
  cp /opt/ericsson/sck/lib/admin_common_functions.lib ${TMPDIR}/lib/admin_common_functions.copy
    if [ $? -ne 0 ]
    then
        echo "Unable to copy admin common to temp script lib dir"
        return 116
    fi

    cp /opt/ericsson/sck/bin/spinner.sh ${TMPDIR}/bin/
    if [ $? -ne 0 ]
    then
        echo "Unable to copy spinner to temp script bin dir"
        return 117
    fi

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

   
    test -e /ericsson/config/.admin_post_upgrade_tasks_status_file
    if [ $? -ne 0 ]
    then
        echo "Predecessor status file not found"
        return 121
    fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


   REPLFUNC="admin_get_ha_state"
   REPLRESP="0"
   TMPDIR="24604_tmp"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}"  > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo 'export ADMIN_STATE="POST_UPGRADE_NONLIVE"' >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt

   echo "substituting function:\n"
   echo `cat ${TMPDIR}/sub.txt`

   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.copy > ${TMPDIR}/lib/admin_common_functions.tmp
   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 100
    fi


   REPLFUNC="admin_check_single_node"
   REPLRESP="1"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{" >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt

   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp > ${TMPDIR}/lib/admin_common_functions.tmp2
   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 102
    fi

   REPLFUNC="admin_check_MC_with_MWS_exclusion"
   REPLRESP="0"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt

   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp2 > ${TMPDIR}/lib/admin_common_functions.tmp3
   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 104
    fi

   REPLFUNC="orc_get_remote_private_hostname"
   REPLRESP="0"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo " export G_REM_PRIV=localhost" >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt

   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp3 > ${TMPDIR}/lib/admin_common_functions.tmp4

   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 106
    fi


   WHEREWEARE=`pwd`
   echo "WHEREWEARE:${WHEREWEARE}"

   REPLFUNC="admin_has_peer"
   REPLRESP="0"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo " touch ${WHEREWEARE}/admin_has_peer_visited" >>  ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt


   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp4 > ${TMPDIR}/lib/admin_common_functions.tmp5

   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 108
    fi

   REPLFUNC="orc_check_oss_roles"
   REPLRESP="1"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo "echo \"returning ${REPLRESP}\" >  ${WHEREWEARE}/orc_check_oss_roles_visited" >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt


   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp5 > ${TMPDIR}/lib/admin_common_functions.tmp6

   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 108
    fi

   REPLFUNC="admin_offline_fth"
   REPLRESP="0"

   # set up the mock functions in a side file
   echo "function ${REPLFUNC}" > ${TMPDIR}/sub.txt
   echo "{"  >> ${TMPDIR}/sub.txt
   echo "echo \"returning ${REPLRESP}\" >  ${WHEREWEARE}/admin_offline_fth_visited" >> ${TMPDIR}/sub.txt
   echo " return ${REPLRESP}" >> ${TMPDIR}/sub.txt
   echo "}"  >> ${TMPDIR}/sub.txt
   echo "function ${REPLFUNC}_tmpreplace()"  >> ${TMPDIR}/sub.txt


   # swap the mock function into the lib instead of the real function (nb newline before } is essential syntax)
   sed "/function ${REPLFUNC}/  {s/function ${REPLFUNC}//; r ${TMPDIR}/sub.txt
}" < ${TMPDIR}/lib/admin_common_functions.tmp6 > ${TMPDIR}/lib/admin_common_functions.lib

   if [ $? -ne 0 ]
    then
        echo "common lib file edit to tmp file failed - unable to proceed with test"
        return 110
    fi


    # check that the right functions have been changed
    CHNG=`diff ${TMPDIR}/lib/admin_common_functions.copy ${TMPDIR}/lib/admin_common_functions.lib`
    if [[ $CHNG != *"admin_get_ha_state"* ]]
    then
        echo "admin_get_ha_state not replaced"
        return 100
    fi
   if [[ $CHNG != *"admin_check_single_node"* ]]
    then
        echo "admin_check_single_node not replaced"
        return 100
    fi
   if [[ $CHNG != *"admin_check_MC_with_MWS_exclusion"* ]]
    then
        echo "admin_check_MC_with_MWS_exclusion not replaced"
        return 100
    fi
   if [[ $CHNG != *"orc_get_remote_private_hostname"* ]]
    then
        echo "orc_get_remote_private_hostname not replaced"
        return 100
    fi
   if [[ $CHNG != *"admin_has_peer"* ]]
    then
        echo "admin_has_peer not replaced"
        return 100
    fi
   if [[ $CHNG != *"orc_check_oss_roles"* ]]
    then
        echo "orc_check_oss_roles not replaced"
        return 100
    fi
   if [[ $CHNG != *"orc_check_oss_roles"* ]]
    then
        echo "orc_check_oss_roles not replaced"
        return 100
    fi
    if [[ $CHNG != *"admin_offline_fth"* ]]
    then
        echo "admin_offline_fth not replaced"
        return 100
    fi

    # Test with mocks
    OUT=`${TMPDIR}/bin/admin_pre_cutover_tasks.bsh 10.44.192.191  /JUMP/UPGRADE_SW/14.3.8`
    RC=$?
    echo "Output for orc_check_oss_roles returns 1 scenario is $OUT"

    if [[ $OUT == *"Running MC checks"* ]]
    then
        echo "Should not have run MC checks when orc_check_oss_roles returns 1"
        return 112
    fi



    # Check return code is not 0
    if [ $RC -ne 0 ]
    then
        echo "Failure returned, when return code when should have succeeded"
        return 113
    fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

   echo "hidden status files for admin:"
   echo `ls -al //ericsson/config/.admin*`
   # Check admin_pre_cutover_tasks status file exists
   test -e /ericsson/config/.admin_pre_cutover_tasks_status_file
    if [ $? -ne 0 ]
    then
        echo "status file not found, but should have been created by this scenario"
        return 131
    fi

    # Check admin_pre_cutover_tasks status file contains NOK
    grep -w "OK" /ericsson/config/.admin_pre_cutover_tasks_status_file
    if [ $? -ne 0 ]
    then
        echo "status file does not contain OK"
        return 132
    fi

   # Check predecessor status file has NOT been removed
   test -e /ericsson/config/.admin_post_upgrade_tasks_status_file
    if [ $? -eq 0 ]
    then
        echo "Predecessor status file found, but should have been removed by this scenario"
        return 133
    fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

  # remove admin_pre_cutover_tasks status file if exists
  test -e /ericsson/config/.admin_pre_cutover_tasks_status_file
    if [ $? -eq 0 ]
    then
        echo "Removing status file created by this test"
        rm /ericsson/config/.admin_pre_cutover_tasks_status_file
        if [ $? -ne 0 ]
        then
           echo "Error removing status file created by this test"
        fi
    fi

   # remove predecessor status file if still exists
   test -e /ericsson/config/.admin_post_upgrade_tasks_status_file
    if [ $? -eq 0 ]
    then
        echo "Removing predecessor status file created for this test"
        rm /ericsson/config/.admin_post_upgrade_tasks_status_file
        if [ $? -ne 0 ]
        then
           echo "Error removing predecessor file created for this test"
        fi
    fi

    test -e 24604_tmp
    if [ $? -eq 0 ]
    then
        echo "Removing temp script dir created for this test"
        rm -rf 24604_tmp
        if [ $? -ne 0 ]
        then
           echo "Error removing temp script dir created for this test"
        fi
    fi
	return 0

}
