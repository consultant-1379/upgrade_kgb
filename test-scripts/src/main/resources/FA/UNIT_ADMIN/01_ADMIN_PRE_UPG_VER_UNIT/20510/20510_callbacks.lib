#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 28/07/14	xmcgama  Test when exclusion list has different state for excluded MC

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    # Remove temporary file if its there
    rm -f /tmp/orc_admin_mc_list

    # offline MC for test
    su nmsadm -c "smtool -offline NotificationAgent -reason=other -reasontext=testing"
    if [ $? -ne 0 ]
    then
        echo "Failed to offline MC"
        return 100
    fi

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    # Ensure library is there
    if [ ! -f /opt/ericsson/sck/lib/admin_common_functions.lib ]
    then
        echo "No admin common library"
        return 101
    fi
    su nmsadm -c "smtool list" | grep -v "started" | grep -v NotificationAgent
    if [ $? -eq 0 ]
    then
        echo "Unexpected MCs not in started state"
        return 103
    fi
    # Check NotificationAgent is offline
    su nmsadm -c "smtool list" | grep "offline" | grep -w NotificationAgent
    if [ $? -ne 0 ]
    then
        echo "NotificationAgent MC should have been offline"
        return 104
    fi
    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    
    source "/opt/ericsson/sck/lib/admin_common_functions.lib"

    echo "NotificationAgent failed" > ./20510_exclusion
    
    OUT=`admin_check_MC_status_against_exclusion_list  ./20510_exclusion`
    if [ $? -eq 0 ]
    then
        echo "Zero return code from function, $OUT"
        return 100
    fi 
    if [[ $OUT != *"Excluded MC NotificationAgent is in state \"offline\" when exclusion file expects \"failed\" [NOK]"* ]]
    then
        echo "Failed to find NOK msg on NotificationAgent offline, $OUT"
        return 101
    fi
    if [[ $OUT != *"MCs were found in an invalid state. If the failed MCs are in an acceptable state, then please re-generate the exclusion list [NOK]"* ]]
    then
        echo "Failed to find NOK msg $OUT"
        return 102
    fi
    
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    su nmsadm -c "smtool list" | grep -v "started" | grep -v "NotificationAgent"
    if [ $? -eq 0 ]
    then
        echo "Unexpected MCs not in started state"
        return 103
    fi
    # Check NotificationAgent is offline
    su nmsadm -c "smtool list" | grep "offline" | grep -w NotificationAgent
    if [ $? -ne 0 ]
    then
        echo "NotificationAgent MC should have been offline"
        return 104
    fi
    if [ -f "/tmp/orc_admin_mc_list" ]
    then
        echo "Temporary file not removed"
        return 105
    fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
    
   su nmsadm -c "smtool -online NotificationAgent" 
   rm -f ./20510_exclusion

	return 0

}

