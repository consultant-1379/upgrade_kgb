#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
source /var/tmp/Liveupgrade/orc_common_functions.lib
#source /var/tmp/Liveupgrade/slu_common_functions.lib

# First test - Upgrade needed
rev1=R9A01
rev2=R9A03
rev3=R9B01
rev4=R10A09
rev5=R8A05
rev6=R8C02
rev7=""

echo " "
echo " "
echo "***** Test Summary *****"
echo " "
echo " "

# Test 1. - Testing Revision $rev1 and $rev2

rev_latest=$( orc_check_latest_revision $rev1 $rev2 )

    echo "1. - $rev1 and $rev2 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev1" ]
    then
        test1=1
    else
        test1=0
    fi

# Test 2. - Testing Revision $rev2 and $rev1

rev_latest=$( orc_check_latest_revision $rev2 $rev1 )

    echo "2. - $rev2 and $rev1 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev1" ]
    then
        test2=1
    else
        test2=0
    fi

# Test 3. - Testing Revision $rev3 and $rev2

rev_latest=$( orc_check_latest_revision $rev3 $rev2 )

    echo "3. - $rev3 and $rev2 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev2" ]
    then
        test3=1
    else
        test3=0
    fi

# Test 4. - Testing Revision $rev3 and $rev4

rev_latest=$( orc_check_latest_revision $rev3 $rev4 )

    echo "4. - $rev3 and $rev4 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev3" ]
    then
        test4=1
    else
        test4=0
    fi

# Test 5. - Testing Revision $rev5 and $rev1

rev_latest=$( orc_check_latest_revision $rev5 $rev1 )

    echo "5. - $rev5 and $rev1 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev5" ]
    then
        test5=1
    else
        test5=0
    fi

# Test 6. - Testing Revision $rev1 and $rev6

rev_latest=$( orc_check_latest_revision $rev1 $rev6 )

    echo "6. - $rev1 and $rev6 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev6" ]
    then
        test6=1
    else
        test6=0
    fi

# Test 7. - Testing Revision $rev1 and $rev7

rev_latest=$( orc_check_latest_revision $rev1 $rev7 )

    echo "7. - $rev1 and $rev7 tested and function found $rev_latest to be the latest revision"

    if [ "$rev_latest" = "$rev7" ]
    then
        test7=1
    else
        test7=0
    fi



echo " "
echo " "
echo "***** Finished *****"
echo " "
echo " "

    if [ $test1 -eq 0 ] && [ $test2 -eq 0 ] && [ $test3 -eq 0 ] && [ $test4 -eq 0 ] && [ $test5 -eq 0 ] && [ $test6 -eq 0 ] && [ $test7 -eq 0 ]
    then
        echo "Function Passed Succesfully for all cases"
        echo " "
        echo " "
	return 0
    else 
        return 1
    fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
