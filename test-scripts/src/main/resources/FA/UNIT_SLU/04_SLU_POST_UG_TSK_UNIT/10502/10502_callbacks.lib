#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    # Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
    source /var/tmp/Liveupgrade/slu_common_functions.lib
    LOGFILE=/tmp/slu_update_crontab
    DEBUG=TRUE
    MOUNT_POINT=/tmp/tmp_mount_point
   
    slu_get_be_info
    ALTERNATE_BOOT_ENV=$($ECHO $BEINFO | $NAWK -F, '{print$3}')
    
    mkdir $MOUNT_POINT
    
    CRONTAB="${MOUNT_POINT}/var/spool/cron/crontabs/root"
    CRONTAB_TMP="${MOUNT_POINT}/var/spool/cron/crontabs/root_tmp"
    
    lumount $ALTERNATE_BOOT_ENV $MOUNT_POINT
    
    if [ -f  $CRONTAB ]
    then 
        if cp $CRONTAB $CRONTAB_TMP
        then
            echo "Successfully copied crontab ${CRONTAB} to ${CRONTAB_TMP}"
        else
            echo "ERROR: Failed to copy ${CRONTAB} to ${CRONTAB_TMP} "
            return 1
        fi
    fi
    
    #Mount of ABE & mount point not removed prior to running TC
    
	return 0
    

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    
    source /var/tmp/Liveupgrade/slu_common_functions.lib
    LOGFILE=/tmp/slu_update_crontab
    DEBUG=TRUE
    MOUNT_POINTS=""
    ALTERNATE_BOOT_ENV=""
    
    slu_get_be_info
    ALTERNATE_BOOT_ENV=$($ECHO $BEINFO | $NAWK -F, '{print$3}')
        
    slu_update_crontab
    
    RES=$?
    
    if [ $RES -eq 0 ]
    then
        echo "Function slu_update_crontab completed successfully."
    else
        echo "ERROR: slu_update_crontab failed. Expected successful result. "
        return 1
    fi
    
    MOUNT_POINTS=$(lumount | grep $ALTERNATE_BOOT_ENV)
    RES=$?
    if [ $RES -eq 0 ] && [ -n ${MOUNT_POINTS} ]
    then
        echo "ERROR: ABE is still mounted"
        return 1
    fi
       
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
    
    source /var/tmp/Liveupgrade/slu_common_functions.lib
    LOGFILE=/tmp/slu_update_crontab
    DEBUG=TRUE
    MOUNT_POINT=/tmp/tmp_mount_point
   
    slu_get_be_info
    ALTERNATE_BOOT_ENV=$($ECHO $BEINFO | $NAWK -F, '{print$3}')
    
    CRONTAB="${MOUNT_POINT}/var/spool/cron/crontabs/root"
    CRONTAB_TMP="${MOUNT_POINT}/var/spool/cron/crontabs/root_tmp"
    CRONTAB_OUTPUT="/tmp/crontab_output"
    
    lumount $ALTERNATE_BOOT_ENV $MOUNT_POINT
    
    cp $CRONTAB $CRONTAB_OUTPUT
    
    if [ -f  $CRONTAB_TMP ]
    then 
        if mv $CRONTAB_TMP $CRONTAB 
        then
            echo "Successfully moved crontab ${CRONTAB_TMP} to ${CRONTAB}"
        else
            echo "ERROR: Failed to mv ${CRONTAB_TMP} to ${CRONTAB} "
            return 1
        fi
    fi
    
    if luumount $MOUNT_POINT
    then
        echo "Successfully unmounted mount point"
    fi
    
    rm $LOGFILE
    rmdir $MOUNT_POINT
    
	return 0

}
