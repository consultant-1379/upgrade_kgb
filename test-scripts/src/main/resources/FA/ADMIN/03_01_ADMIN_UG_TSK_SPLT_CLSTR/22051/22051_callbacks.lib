#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
    
    echo "Creating admin pre upgrade tasks status file with a OK"
    echo OK > /ericsson/config/.admin_pre_upgrade_tasks_status_file
    if [ -f /ericsson/config/.admin_split_cluster_status_file ]; then
            echo "moving this module previous run status file aside" 
            mv /ericsson/config/.admin_split_cluster_status_file /ericsson/config/.admin_split_cluster_status_file_tmp22051
    fi
    echo "Creating a /tmp/adtmp22051.log file for parsing the results"	
    touch /tmp/adtmp22051.log || 1 
    
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

  # check this is a single node system
  . /opt/ericsson/sck/lib/admin_common_functions.lib
  ADMIN_STATE=""
  admin_get_ha_state
  if [ "${ADMIN_STATE}" != "SINGLE" ]; then
     echo "This is not a single node system, so test cannot run"
     return 1
  fi
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

local L_FAILS=0

/opt/ericsson/sck/bin/admin_split_clusterkk.bsh | tee /tmp/adtmp22051.log
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: module did not complete successfully"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking console tee file exists"
ls -al "/tmp/adtmp22051.log"
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: console output tee file not found, unable to assess test results"
  return 1
fi

echo "checking for syntax errors etc"
egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' /tmp/adtmp22051.log
if [ ${?} -eq 0 ]; then
  echo "TEST FAIL: Code Errors were found, please check output."
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking no NOK in output"
# check no NOK in output
egrep -i "NOK" /tmp/adtmp22051.log
if [ ${?} -eq 0 ]; then
  echo "TEST FAIL: NOK found in output"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking logfile referenced in console output"
#check logfile exists - need to grep the logfile name out of the output & do an ls on it
egrep -i "Log file is" /tmp/adtmp22051.log | egrep -i "admin_split_cluster_"
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: No reference to expected log file in console output"
  let "L_FAILS = L_FAILS + 1"
else
  echo "checking log file exists"
  LOGF=`egrep -i "Log file is" /tmp/adtmp22051.log | egrep -i "admin_split_cluster_" | awk '{ print $5 }'`
  if [ -f ${LOGF} ]; then
     echo "checking logfile not empty"
     if [ -s ${LOGF} ]; then
        echo "checking logfile reports module success"
        egrep -i 'module completed successfully' ${LOGF}
        if [ ${?} -ne 0 ]; then
            echo "TEST FAIL: output does not report successful completion"
            let "L_FAILS = L_FAILS + 1"
        fi
        echo "checking logfile for header1"
        egrep -i '==================<' ${LOGF} | grep ">===================="
        if [ ${?} -ne 0 ]; then
            echo "TEST FAIL: no level one headers found in logfile"
            let "L_FAILS = L_FAILS + 1"
        fi
        echo "checking logfile for header2"
        egrep -i '===>' ${LOGF} 
        if [ ${?} -ne 0 ]; then
            echo "TEST FAIL: no level two headers found in logfile"
            let "L_FAILS = L_FAILS + 1"
        fi
     else
        echo "logfile empty"
        let "L_FAILS = L_FAILS + 1"
     fi
  else
     echo "TEST FAIL: Logfile ${LOGF} not found"
     let "L_FAILS = L_FAILS + 1"
  fi
fi


echo "checking status file exists"
ls -al "/ericsson/config/.admin_split_cluster_status_file"
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: status file not found"
  let "L_FAILS = L_FAILS + 1"
else
   echo "checking for OK in status file"
   grep -w "OK" "/ericsson/config/.admin_split_cluster_status_file"
   if [ ${?} -ne 0 ]; then
     echo "TEST FAIL: status file does not contain OK"
     let "L_FAILS = L_FAILS + 1"
   fi
fi

echo "checking detected admin server"
egrep -i "Script is running on an ADMIN server \[OK\]" /tmp/adtmp22051.log 
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: admin server check not reported success"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking detected OK status of previous orch module"
egrep -i "Status file from previous Orchestrator module" /tmp/adtmp22051.log | grep  "\[OK\]" 
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: previous module status check not reported success"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking no previous run of this module"
egrep -i "No previous run of module" /tmp/adtmp22051.log | grep  "\[OK\]" 
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL:  no previous run of this module not reported"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking skipping split"
egrep -i "Skipping splitting the cluster as system is single node ADMIN cluster \[OK\]" /tmp/adtmp22051.log
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: skipping cluster split not reported"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking skipping offline fths"
egrep -i "Skipping offline fth MC task as system is single node ADMIN cluster \[OK\]" /tmp/adtmp22051.log
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: skipping offline fths not reported"
  let "L_FAILS = L_FAILS + 1"
fi

if [ ${L_FAILS} != 0 ]; then
   echo "TEST FAILS: found ${L_FAILS} problems"
   return 1
else
   echo "no problems found"
   return 0
fi

return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
    if [ -f /ericsson/config/.admin_split_cluster_status_file_tmp22051 ]; then
            echo "reinstating this module previous run status file" 
            mv /ericsson/config/.admin_split_cluster_status_file_tmp22051 /ericsson/config/.admin_split_cluster_status_file
    fi
    
    rm -rf /tmp/adtmp22051.log || 1
    return 0

}
