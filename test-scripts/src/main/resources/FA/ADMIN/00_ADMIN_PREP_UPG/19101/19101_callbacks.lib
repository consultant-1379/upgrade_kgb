#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

        touch /tmp/pre_tmp19101_${AT_JOB}.log || return 1
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
  #if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
  #      echo "Variable ORCH_SERVER is not set. Check your environment file"
  #      return 1
  #else echo "ORCH_SERVER: ${ORCH_SERVER}"
  #fi
  #if [ "${ORCH_SERVER_LIVE}xxx" = "xxx" ]; then
  #      echo "Variable ORCH_SERVER_LIVE is not set. Check your environment file"
  #      return 1
  #else echo "ORCH_SERVER_LIVE: ${ORCH_SERVER_LIVE}"
  #fi
  echo "checking env vars"
  if [ "${CI_MWS_BIP}xxx" = "xxx" ]; then
      echo "Variable CI_MWS_BIP is not set. Check your environment file"
    return 1
  else echo "CI_MWS_BIP: ${CI_MWS_BIP}"
  fi
  if [ "${ORCH_OSSRC_MEDIA}xxx" = "xxx" ]; then
      echo "Variable ORCH_OSSRC_MEDIA is not set. Check your environment file"
    return 1
  else echo "ORCH_OSSRC_MEDIA: ${ORCH_OSSRC_MEDIA}"
  fi
  if [ "${ORCH_UPGRADE_DIR}xxx" = "xxx" ]; then
      echo "Variable ORCH_UPGRADE_DIR is not set. Check your environment file"
    return 1
  else echo "ORCH_UPGRADE_DIR: ${ORCH_UPGRADE_DIR}"
  fi
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
# In this test the module runs successfully
    echo "temporary tee file is ${L_TLOG}"

    local L_TMP
    local L_TMP2
    local L_TMP3
    local L_TLOG=/tmp/pre_tmp19101_${AT_JOB}.log
    local L_ORCH_LOG=/ericsson/orchestrator/log/admin_prepare_for_upgrade_
    local L_LOG_EXIST
    local L_LOG_HAS_CONTENT
    local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
    local L_ORCH_CMD_MODE="local"
    local L_TRC=/tmp/cominf_19101_exit_code

    # In this test the module runs successfully
    echo "MODE changed explicitly for this TC"
    echo "MODE is ${L_ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
    case ${L_ORCH_CMD_MODE} in 
        local)     echo "Option 1 - run locally on the box"
                   (su - orcha /ericsson/orchestrator/bin/admin_prepare_for_upgrade.bsh $CI_MWS_BIP $ORCH_OSSRC_MEDIA $ORCH_UPGRADE_DIR $ORCH_SERVER_LIVE $ORCH_SERVER | tee ${L_TLOG}; echo ${PIPESTATUS[0]} > ${L_TRC}) &
                   L_PID=$!
                   sleep $(echo $RANDOM % 10 + 2 | bc)
                   L_KILL_PID=$(ps -ef | grep '/ericsson/orchestrator/bin/admin_prepare_for_upgrade.bsh' | awk '{ print $2 }')
                   kill -2 $L_KILL_PID
                   wait $L_PID
                   L_TMP=$(cat ${L_TRC})
           ;;
        *)         echo "ORCH_CMD_MODE should be overridden to local for this test, but was set to ${L_ORCH_CMD_MODE}" 
                   return 1
                   ;;
    esac

    rm -f ${L_TRC}                                                                                                                                                      

    if [ ${L_TMP} -ne 1 ]; then
        echo "TEST FAIL: module completed successfully"
    return 1
    fi

    # Check that the logfile created above exists
    #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 1
    fi

    # Check to see if any commands failed during execution of the module
    #
    echo "checking for syntax errors etc"
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Code Errors were found, please check output."
        return 1
    fi

    # Do not check whether the module output contains "NOK" - this may be caused by the interupt itself.

    # # Check if an interrupt has been trapped
    # # 
    echo "checking an interrupt has been trapped"
    egrep -i "Interrupt trapped" ${L_TLOG} > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -eq 1 ]; then
        echo "TEST FAIL: No interrupt found in output"
        return 1
    fi  

    # Extract the name of the module log file from the console output file
    echo "Checking for orchestrator logfile in console output"
    LOGF=$(egrep -i "Refer to logfile" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | sed 's/.*Refer to logfile //'  | sed 's/\.log .*/\.log/')

    if [ "${LOGF}" = "" ]; then
        # If no log file name is extracted then the following code is academic so return now.
        echo "ERROR: Module log file name not found in console output."
        return 1
    fi

    # Get details of the module log file dependant on how we are running
    case ${L_ORCH_CMD_MODE} in
        local)  # Does the log file exist
                test -f ${LOGF}
                L_LOG_EXIST=$?

                # Does the log file have any content
                echo "Checking the module logfile."
                test -s ${LOGF}
                L_LOG_HAS_CONTENT=$?
                
                # Did the module complete successfully according to the log file
                cat ${LOGF} | grep -i 'module completed successfully'
                L_MODULE_STATUS=$?
                ;;
       *)      # Will never get here as return 1 in earlier case statement.
        ;;
    esac

  # Exit  with error if the module log file does not exist
  if [ ${L_LOG_EXIST} -ne 0 ]; then
      echo "ERROR: Log file ${LOGF} does not exist."
    return 1
  fi

  # Exit with error if the module log file has no content.
  if [ ${L_LOG_HAS_CONTENT} -ne 0 ]; then
      echo "ERROR: Log file ${LOGF} has no content."
    return 1
  fi
    
  # Exit with error if the module succeeded.
  if [ ${L_MODULE_STATUS} -eq 0 ]; then
      echo "ERROR: Log file ${LOGF} show the module run succeeded."
    return 1
  fi

    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

    rm /tmp/pre_tmp19101_${AT_JOB}.log || return 1
    return 0
}
