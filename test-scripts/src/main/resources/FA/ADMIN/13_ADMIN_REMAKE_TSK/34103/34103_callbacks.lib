#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 29.10.14	xphilco	Test for slu_pre_upgrade_verification.bsh module

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

    touch "/tmp/pre_tmp34103_${AT_JOB}.log" || return 1
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	local statusFileUpgradeRes=0;
	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

    # Checks for expected variables. Exit early if these are not set.
    if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
        echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
        return 1
    fi

    if [ "${ORCH_UPGRADE_DIR}xxx" = "xxx" ]; then
        echo "Variable ORCH_UPGRADE_DIR is not set. Check your environment file"
        return 1
    fi

    if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
        echo "Variable ORCH_TYPE is not set. Check your environment file"
        return 1
    fi

    if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
        echo "Variable ORCH_SERVER is not set. Check your environment file"
        return 1
    fi

    if [ "${ORCH_SERVER_LIVE}xxx" = "xxx" ]; then
        if [ "${ORCH_TYPE}" != "VAPP" ] && [ "${ORCH_TYPE}" != "SINGLE" ]; then
			echo "Variable ORCH_SERVER_LIVE is not set. Check your environment file"	
        return 1
		fi
    fi

    if [ "${ORCH_ISO_IP}xxx" = "xxx" ]; then
        echo "Variable ORCH_ISO_IP is not set. Check your environment file"
        return 1
    fi

    # List the variables to be used in the TC.
    echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
    echo "ORCH_UPGRADE_DIR: ${ORCH_UPGRADE_DIR}"
    echo "ORCH_TYPE: ${ORCH_TYPE}"
    echo "ORCH_SERVER: ${ORCH_SERVER}"
    echo "ORCH_SERVERLIVE: ${ORCH_SERVER_LIVE}"
    echo "ORCH_ISO_IP: ${ORCH_ISO_IP}"
		
    echo "Creating previous module status file (admin_pre_remake_cluster_tasks)"
	case ${ORCH_CMD_MODE} in
        local)	# Does the log file exist
                echo "OK" > "/ericsson/config/.admin_pre_remake_cluster_tasks_status_file"
				statusFileUpgradeRes=$? 
                ;;
        *)	    # Does the log file exist
                ssh -o StrictHostKeyChecking=no root@$ORCH_ISO_IP "echo 'OK' > '/ericsson/config/.admin_pre_remake_cluster_tasks_status_file'"
				statusFileUpgradeRes=$?
				;;
    esac
	
	if [ "${statusFileUpgradeRes}" -ne 0 ]; then
        echo "Updating Status File with [OK] Failed"
        return 1
    fi
	
	return 0

}
###
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    echo "MODE is ${ORCH_CMD_MODE} ...... "

    local L_TMP1
    local L_TMP2
    local L_TMP3
    local L_TLOG="/tmp/pre_tmp34103_${AT_JOB}.log"
    local L_LOG_EXIST
    local L_LOG_HAS_CONTENT
    local L_MODULE_STATUS
    local L_ORCH_LOG="admin_remake_cluster_tasks_"

    #############################################################################
    #
    # Run the admin_remake_cluster_tasks.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################

    #NOTE: Define these variables in env file: ORCH_ISO_IP, CI_MWS_BIP   
    # In this test the module runs successfully
    echo "MODE is ${ORCH_CMD_MODE} ...... "
    echo " "

    case ${ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     /opt/ericsson/sck/bin/admin_remake_cluster_tasks.bsh -h | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_fab)     echo "Option 2 - Run locally on box but ssh back to MWS to Run via Fabric"
                     ssh -o StrictHostKeyChecking=no $STUB_USER@$STUB_LOC "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER dmin_remake_cluster_tasks:options='-h'" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        local_fab)   echo "Option 3 - Run via fabric from MWS"
    	             fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_remake_cluster_tasks:options="-h" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_frm_mws) echo "Option 4 - Run via SSH from MWS"
    	             su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP 'PATH=$PATH:/usr/sbin:/sbin; /usr/local/bin/sudo /opt/ericsson/sck/bin/admin_remake_cluster_tasks.bsh -h'" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        *)           echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                     return 1
                     ;;
    esac

    # # Check the return status of module whichever way it was run.
    # #
    if [ ${L_TMP} -ne 0 ]; then
        echo "TEST FAIL: module did not complete successfully"
		return 1
    fi

    # # Check that the logfile created above exists
    # #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 1
    fi

    # # Check to see if any commands failed during execution of the module
    # #
    echo "checking for syntax errors etc"
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Code Errors were found, please check output."
        return 1
    fi

    # Output from the module includes "NOK" if there are any errors. Check for these in the log file.
    #
    echo "checking no NOK in output"
    egrep -i "\[NOK\]" ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: NOK found in output"
        return 1
    fi

   	# Output from the module includes "ERROR Invalid option" 
	echo "Checking that module printed usage"
	egrep -i "LICENSE" ${L_TLOG} > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: Invalid usage not shown"
        return 1
    fi

    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
 
	rm -f "/tmp/pre_tmp34103_${AT_JOB}.log" || return 1
	
	return 0

}
