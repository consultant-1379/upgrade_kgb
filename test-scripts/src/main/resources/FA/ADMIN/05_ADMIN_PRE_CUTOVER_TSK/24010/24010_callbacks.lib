#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required    

    echo "Creating admin post upgrade tasks status file with a NOK"
    echo "NOK" > "/ericsson/config/.admin_post_upgrade_tasks_status_file"
	touch /tmp/pre_adtmp6.log || 1
    
    #echo "Creating admin pre cutover tasks status file with a OK"
    #echo OK > /ericsson/config/.admin_pre_cutover_tasks_status_file 
    rm -rf /ericsson/config/.admin_pre_cutover_tasks_status_file
    

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	#ssh -o StrictHostKeyChecking=no ossrcdm@gateway "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_reboot_tasks"    
    #/var/tmp/Liveupgrade/slu_reboot_tasks.bsh
    #fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_reboot_tasks:options=
    
#    ssh -o StrictHostKeyChecking=no ossrcdm@gateway "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_final_pre_checks:options="    
        
#	if [ $? -ne 1 ]; then
#		echo "perform admin final pre checks failed...."
#		return 1
#	fi

#	return 0
    
    local L_TMP1
    local L_TMP2
    local L_TMP3
    local L_TMP4
    local L_STATUS

    ssh -o StrictHostKeyChecking=no ossrcdm@gateway "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_pre_cutover_tasks:options=,mws_ip=10.44.192.191,path_to_orch_depot=/JUMP/UPGRADE_SW/14.3.8" | tee /tmp/pre_adtmp6.log
    L_TMP1=( ${PIPESTATUS[0]} )      #Get module result not that of last command
    
    egrep -i 'previous Orchestrator module is \[NOK\]' /tmp/pre_adtmp6.log  
    L_TMP2=( ${?} )
    printf "\n"
    echo "=====>MODULE GREP COMMAND OUTPUT FOR specified string : $L_TMP2"
    printf "\n"
    
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' /tmp/pre_adtmp6.log
    L_TMP3=( ${?} )
    
    if [ ${L_TMP1} -eq 1 ] && [ ${L_TMP2} -eq 0 ]; then
        echo "=====>Now checking for common bash errors in modules output..."
        if [ ${L_TMP3} -eq 1 ]; then
            echo "=====>No common bash errors found"
            printf "\n"
            #return 0
        else
            echo "Bash Errors were found, please check the output"
            #return 1
        fi
    else
            echo "=====>The TC is failing..."
            printf "\n"
            #return 1
    fi
    
    cat "/ericsson/config/.admin_pre_cutover_tasks_status_file"
    L_TMP4=( ${?} )
    L_STATUS=$(cat /ericsson/config/.admin_pre_cutover_tasks_status_file | awk '{print $1}'); echo ${L_STATUS}
    
    if [ ${L_TMP4} -eq 0 ] && [ "$L_STATUS" = 'NOK' ]
    then
        printf "\n"
        echo "=====>admin_pre_cutover_tasks_status_file created as NOK"
        printf "\n" 
        return 0
    else
        printf "\n"
        echo "=====>Status file not created or created as an OK. The TC is failing..."
        printf "\n"
        return 1
    fi
    
    
    # if [ ${L_TMP4} -eq 0 ]; then
        # printf "\n"
        # echo "=====>Previous module status file not deleted as admin_pre_cutover_tasks module failed."
        # printf "\n"
        # return 0
    # else
        # printf "\n"
        # echo "=====>Previous module status file does not exist. The TC is failing..."
        # printf "\n"
        # return 1
    # fi       
    
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
