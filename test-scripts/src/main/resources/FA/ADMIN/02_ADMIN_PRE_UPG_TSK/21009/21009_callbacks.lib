#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
	touch /tmp/pre_tmp21009_${AT_JOB}.log || return 1
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
   # Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
  echo "checking env vars "
  if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
      echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
    return 1
  else echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
  fi

  if [ "${CI_MWS_BIP}xxx" = "xxx" ]; then
      echo "Variable CI_MWS_BIP is not set. Check your environment file"
    return 1
  else echo "CI_MWS_BIP: ${CI_MWS_BIP}"
  fi

  if [ "${ORCH_UPGRADE_DIR}xxx" = "xxx" ]; then
      echo "Variable ORCH_UPGRADE_DIR is not set. Check your environment file"
    return 1
  else echo "ORCH_UPGRADE_DIR}: ${ORCH_UPGRADE_DIR}}"
  fi

  if [ "${ORCH_OSSRC_MEDIA}xxx" = "xxx" ]; then
      echo "Variable ORCH_OSSRC_MEDIA is not set. Check your environment file"
    return 1
  else echo "ORCH_OSSRC_MEDIA: ${ORCH_OSSRC_MEDIA}"
  fi

    case ${ORCH_CMD_MODE} in 
        ssh_fab)     if [ "${STUB_USER}xxx" = "xxx" ]; then
                        echo "Variable STUB_USER is not set. Check your environment file"
                        return 1
                     else echo "STUB_USER: ${STUB_USER}"
                     fi
                     if [ "${STUB_LOC}xxx" = "xxx" ]; then
                        echo "Variable STUB_LOC is not set. Check your environment file"
                        return 1
                     else echo "STUB_LOC: ${STUB_LOC}"
                     fi
                     if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_SERVER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_SERVER: ${ORCH_SERVER}"
                     fi
                     if [ "${ORCH_USER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_USER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_USER: ${ORCH_USER}"
                     fi
                     ;;
        local_fab)   if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_SERVER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_SERVER: ${ORCH_SERVER}"
                     fi
                     if [ "${ORCH_USER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_USER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_USER: ${ORCH_USER}"
                     fi
                     ;;
        ssh_frm_mws) if [ "${ORCH_SERVER_LIVE}xxx" = "xxx" ]; then
                        echo "Variable ORCH_SERVER_LIVE  is not set. Check your environment file"
                        return 1
                     else echo "ORCH_SERVER_LIVE: ${ORCH_SERVER_LIVE}"
                     fi
                     ;;
    esac
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    local L_TMP
    local L_TMP2
    local L_TMP3
    local L_TLOG=/tmp/pre_tmp21009_${AT_JOB}.log

    echo "MODE is ${ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
    case ${ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     /opt/ericsson/sck/bin/admin_pre_upgrade_tasks.bsh | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_fab)     echo "Option 2 - Run locally on box but ssh back to MWS to Run via Fabric"
                    ssh -o StrictHostKeyChecking=no $STUB_USER@$STUB_LOC "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_pre_upgrade_tasks:options=,mws_ip=,upgrade_dir=,ossrc_media=" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        local_fab)   echo "Option 3 - Run via fabric from MWS"
    	               fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER admin_pre_upgrade_tasks:options=,mws_ip=,upgrade_dir=,ossrc_media=  | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_frm_mws) echo "Option 4 - Run via SSH from MWS"
    	             su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_SERVER_LIVE 'PATH=$PATH:/usr/sbin:/sbin; /usr/local/bin/sudo /opt/ericsson/sck/bin/admin_pre_upgrade_tasks.bsh'" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        *)           echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                     return 1
                     ;;
    esac
	

egrep -i 'missing mandatory parameters' ${L_TLOG}
L_TMP2=( ${?} )
egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
L_TMP3=( ${?} )
    if [ ${L_TMP} -eq 1 ] && [ ${L_TMP2} -eq 0 ]; then
        echo "Test worked, checking for Code errors..."
            if [ ${L_TMP3} -eq 1 ]; then
                    echo "No code errors found"
                    return 0
            else
                    echo "Code Errors were found, please check output."
                return 1
           fi
    else
            return 1
    fi
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
	rm -rf /tmp/pre_tmp21009_${AT_JOB}.log || return 1
	return 0

}
