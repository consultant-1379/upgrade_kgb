#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
	touch /tmp/prep_omtmp30011_${AT_JOB}.log || return 1
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    local L_TMP
    local L_TMP2
    local L_TMP3
    local L_TLOG=/tmp/prep_omtmp30011_${AT_JOB}.log
    local L_ORCH_LOG=/ericsson/orchestrator/log/om_prepare_for_upgrade_
    local L_STATUS_FILE=/var/ericsson/log/.om_prepare_for_upgrade_status_file
    local L_LOG_EXIST
    local L_LOG_HAS_CONTENT
    local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
    local L_ORCH_CMD_MODE="local"
    local L_INVALID_MEDIA_DIR=/JUMP/

	#############################################################################
    #
    # Run the om_prepare_for_upgrade.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################

	echo "MODE changed explicitly for this TC"
    echo "MODE is ${L_ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
    case ${L_ORCH_CMD_MODE} in 
                  local)       echo "Option 1 - run locally on the box"
                     case ${ORCH_TYPE} in
                         VAPP|SINGLE)    su - orcha /ericsson/orchestrator/bin/om_prepare_for_upgrade.bsh $ORCH_OM_MEDIA_DIR $ORCH_SERVER $ORCH_SERVER | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
                                ;;
                          CLUSTER)        su - orcha /ericsson/orchestrator/bin/om_prepare_for_upgrade.bsh $ORCH_OM_MEDIA_DIR $ORCH_ISO_IP $ORCH_ISO_IP | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
                                ;;
                     esac
           ;;
                
        *)         echo "ORCH_CMD_MODE should be overridden to local for this test, but was set to ${L_ORCH_CMD_MODE}" 
                   #echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                   return 1
                   ;;
    esac
	
egrep -i 'om_prepare_for_upgrade.bsh module completed successfully' ${L_TLOG}
L_TMP2=( ${?} )
egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
L_TMP3=( ${?} )
    if [ ${L_TMP} -eq 0 ] && [ ${L_TMP2} -eq 0 ]; then
        echo "Test worked, checking for Code errors..."
            if [ ${L_TMP3} -eq 1 ]; then
                    echo "No code errors found"
                    return 0
            else
                    echo "Code Errors were found, please check output."
                return 1
           fi
    else
            return 1
    fi
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
	rm -rf /tmp/prep_omtmp30011_${AT_JOB}.log || return 1
	return 0

}
