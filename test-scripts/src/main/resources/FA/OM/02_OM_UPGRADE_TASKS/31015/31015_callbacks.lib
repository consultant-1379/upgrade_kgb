#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 29.10.14	xphilco	Test for om_upgrade_tasks.bsh module

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

    touch /tmp/pre_tmp31015.log || return 1
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	
	# Change return code as required

    # Checks for expected variables. Exit early if these are not set.
	if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
	    echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
		return 1
	fi

	if [ "${ORCH_OM_MEDIA_DIR}xxx" = "xxx" ]; then
	    echo "Variable ORCH_OM_MEDIA_DIR is not set. Check your environment file"
		return 1
	fi

	if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
	    echo "Variable ORCH_TYPE is not set. Check your environment file"
		return 1
	fi

	if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
	    echo "Variable ORCH_SERVER is not set. Check your environment file"
		return 1
	fi

	if [ "${ORCH_ISO_IP}xxx" = "xxx" ]; then
	    echo "Variable ORCH_ISO_IP is not set. Check your environment file"
		return 1
	fi

    # On TC's to be run on the MWS only make sure that the ORCH_CMD_MODE is set to local
    #export OLD_ORCH_CMD_MODE=${ORCH_CMD_MODE}
	#export ORCH_CMD_MODE="local"

	# List the variables to be used in the TC.
	echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
	echo "ORCH_OM_MEDIA_DIR: ${ORCH_OM_MEDIA_DIR}"
	echo "ORCH_TYPE: ${ORCH_TYPE}"
	echo "ORCH_SERVER: ${ORCH_SERVER}"
	echo "ORCH_ISO_IP: ${ORCH_ISO_IP}"
	return 0

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    local L_TMP
    local L_TMP2
    local L_TMP3
    local L_TLOG=/tmp/pre_tmp31015.log
    local L_ORCH_LOG=/var/ericsson/log/OM_UPGRADE/om_upgrade_tasks_
    local L_STATUS_FILE=/var/log/ericsson/.om_upgrade_tasks_status_file
	local L_LOG_EXIST
	local L_LOG_HAS_CONTENT
	local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST

    #############################################################################
    #
    # Run the slu_upgrade_tasks.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################
	
	if [ "${ORCH_CMD_MODE}" = "local_fab" ]; then
	    echo "Variable ORCH_CMD_MODE overeverwritten"
		ORCH_CMD_MODE="ssh_frm_mws"
	fi
	
    #NOTE: Define these variables in 31100 env file: ORCH_ISO_IP, CI_MWS_BIP   
    # In this test the module runs successfully
    echo "MODE is ${ORCH_CMD_MODE} ...... "
    echo " "
    case ${ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     /var/tmp/oam_utils/om_upgrade_tasks.bsh -h | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_frm_mws) echo "Option 4 - Run via SSH from MWS"
		             case ${ORCH_TYPE} in
					 SINGLE|VAPP)     echo "Running in ${ORCH_TYPE} environment"
					                  su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_SERVER '/usr/local/bin/sudo /var/tmp/oam_utils/om_upgrade_tasks.bsh -h'" | tee ${L_TLOG}
					                  L_TMP=( ${PIPESTATUS[0]} )
									  ;;
					 CLUSTER)         echo "Running in ${ORCH_TYPE} environment"
					                  su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP '/usr/local/bin/sudo /var/tmp/oam_utils/om_upgrade_tasks.bsh -h'" | tee ${L_TLOG}
									  L_TMP=( ${PIPESTATUS[0]} )
									  ;;
					 *)            echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					               return 1
								   ;;
					 esac
           ;;
        *)           echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                     return 1
                     ;;
    esac

   

    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
 
    rm /tmp/pre_tmp31015.log || return 1

    return 0

}
