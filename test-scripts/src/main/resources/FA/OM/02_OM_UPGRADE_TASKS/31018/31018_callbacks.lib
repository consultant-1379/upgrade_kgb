#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 29.10.14	xphilco	Test for om_upgrade_tasks.bsh module

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
	local L_TMP_OUTPUT="/tmp/31018_${AT_JOB}.output"
  touch /tmp/pre_tmp31018_${AT_JOB}.log || return 1
	touch "${L_TMP_OUTPUT}"
	
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
 echo "checking env vars"
 if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
      echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
    return 1
  else echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
  fi
  if [ "${ORCH_SERVER_TYPE}xxx" = "xxx" ]; then
      echo "Variable ORCH_SERVER_TYPE is not set. Check your environment file"
    return 1
  else echo "ORCH_SERVER_TYPE: ${ORCH_SERVER_TYPE}"
  fi
  if [ "${CI_MWS_BIP}xxx" = "xxx" ]; then
      echo "Variable CI_MWS_BIP is not set. Check your environment file"
    return 1
  else echo "CI_MWS_BIP: ${CI_MWS_BIP}"
  fi
  if [ "${ORCH_OM_MEDIA_DIR}xxx" = "xxx" ]; then
      echo "Variable ORCH_OM_MEDIA_DIR is not set. Check your environment file"
    return 1
  else echo "ORCH_OM_MEDIA_DIR: ${ORCH_OM_MEDIA_DIR}"
  fi

  case ${ORCH_CMD_MODE} in 
        ssh_fab)     if [ "${STUB_USER}xxx" = "xxx" ]; then
                        echo "Variable STUB_USER is not set. Check your environment file"
                        return 1
                     else echo "STUB_USER: ${STUB_USER}"
                     fi
                     if [ "${STUB_LOC}xxx" = "xxx" ]; then
                        echo "Variable STUB_LOC is not set. Check your environment file"
                        return 1
                     else echo "STUB_LOC: ${STUB_LOC}"
                     fi
                     if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_SERVER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_SERVER: ${ORCH_SERVER}"
                     fi
                     if [ "${ORCH_USER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_USER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_USER: ${ORCH_USER}"
                     fi
                     ;;
        local_fab)   if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_SERVER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_SERVER: ${ORCH_SERVER}"
                     fi
                     if [ "${ORCH_USER}xxx" = "xxx" ]; then
                        echo "Variable ORCH_USER is not set. Check your environment file"
                        return 1
                     else echo "ORCH_USER: ${ORCH_USER}"
                     fi
                     ;;
        ssh_frm_mws) case ${ORCH_TYPE} in
					                  SINGLE|VAPP)   if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                                               echo "Variable ORCH_SERVER  is not set. Check your environment file"
                                               return 1
                                           else echo "ORCH_SERVER: ${ORCH_SERVER}"
                                           fi
										                       ;;
					                  CLUSTER)       if [ "${ORCH_ISO_IP}xxx" = "xxx" ]; then
                                               echo "Variable ORCH_ISO_IP  is not set. Check your environment file"
                                               return 1
                                           else echo "ORCH_ISO_IP: ${ORCH_ISO_IP}"
                                           fi
									                         ;;
	                                *)       echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					                                 return 1
								                           ;;
					           esac                      
                     
                     ;;
  esac

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
# module will succeed
    local L_TMP
    local L_TMP2
    local L_TMP3
    local L_TLOG=/tmp/pre_tmp31018_${AT_JOB}.log
    local L_ORCH_LOG=/var/ericsson/log/OM_UPGRADE/om_upgrade_tasks_
    local L_STATUS_FILE=/var/ericsson/log/.om_upgrade_tasks_status_file
	local L_LOG_EXIST
	local L_LOG_HAS_CONTENT
	local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
    local L_STATUS_FILE_OK
	local L_TMP_OUTPUT="/tmp/31018_${AT_JOB}.output"
	local L_PEER_PKG_STATUS
    local L_PID
    local L_PPID
    local L_TRC=/tmp/cominf_31018_exit_code

    #############################################################################
    #
    # Run the slu_upgrade_tasks.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################

    #NOTE: Define these variables in 31018 env file: ORCH_ISO_IP, CI_MWS_BIP   
    # In this test the module runs successfully
    echo "MODE is ${ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo "temporary output file is ${L_TMP_OUTPUT}"
    echo " "
	
    case ${ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     /var/tmp/oam_utils/om_upgrade_tasks.bsh $ORCH_SERVER_TYPE $CI_MWS_BIP $ORCH_OM_MEDIA_DIR | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        ssh_fab)     echo "Option 2 - Run locally on box but ssh back to MWS to Run via Fabric"
                     ssh -o StrictHostKeyChecking=no $STUB_USER@$STUB_LOC "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER om_upgrade_tasks:options=,server_type=$ORCH_SERVER_TYPE,mws_ip=$CI_MWS_BIP,path_to_om=$ORCH_OM_MEDIA_DIR" | tee ${L_TLOG}
                     L_TMP=( ${PIPESTATUS[0]} )
                     ;;
        local_fab)   echo "Option 3 - Run via fabric from MWS"
    	             (fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER om_upgrade_tasks:options=,server_type=$ORCH_SERVER_TYPE,mws_ip=$CI_MWS_BIP,path_to_om=$ORCH_OM_MEDIA_DIR | tee ${L_TLOG}; echo ${PIPESTATUS[0]} > ${L_TRC} ) &
                     L_TMP2=$!
                     # Randomise when the ctrl-c is sent
                     sleep $(echo $RANDOM % 35 | bc)
                     L_PPID=$(ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER ps -eaf| grep 'sh -c /bin/bash -l -c "/usr/local/bin/sudo /var/tmp/oam_utils/om_upgrade_tasks.' | awk '{ print $2 }')
                     # Find the PID of the module on the remote server and cause an interrupt
                     L_PID=$(ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER ps -eaf | awk "\$3 ~ /^$L_PPID\$/ { print \$2 }")
                     ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER "kill -2 $L_PID"
                     wait $L_TMP2
                     L_TMP=$(cat ${L_TRC})
                     ;;
        ssh_frm_mws) echo "Option 4 - Run via SSH from MWS"
		             case ${ORCH_TYPE} in
					 SINGLE|VAPP)     	echo "Running in ${ORCH_TYPE} environment"
										su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_SERVER '/usr/local/bin/sudo /var/tmp/oam_utils/om_upgrade_tasks.bsh $ORCH_SERVER_TYPE $CI_MWS_BIP $ORCH_OM_MEDIA_DIR 2>&1'" > $L_TMP_OUTPUT 2>&1 
										   L_TMP=$?
										   cat $L_TMP_OUTPUT 
										   cat $L_TMP_OUTPUT >> ${L_TLOG}

										;;
					 CLUSTER)         	echo "Running in ${ORCH_TYPE} environment"
										su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP '/usr/local/bin/sudo /var/tmp/oam_utils/om_upgrade_tasks.bsh $ORCH_SERVER_TYPE $CI_MWS_BIP $ORCH_OM_MEDIA_DIR 2>&1'" > $L_TMP_OUTPUT 2>&1 
										L_TMP=$?
                                                           cat $L_TMP_OUTPUT
                                                           cat $L_TMP_OUTPUT >> ${L_TLOG}

									  ;;
					 *)            echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					               return 1
								   ;;
					 esac
           ;;
        *)           echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                     return 1
                     ;;
    esac

    rm -f ${L_TRC}

    # Check the return status of slu_upgrade_tasks.bsh whichever way it was run.
    #
    if [ ${L_TMP} -ne 1 ]; then
        echo "TEST FAIL: module did not complete successfully"
		return 1
    fi

    # Check that the logfile created above exists
    #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 1
    fi

    # Check to see if any commands failed during execution of the module
    #
    echo "checking for syntax errors etc"
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Code Errors were found, please check output."
        return 1
    fi

    # Output from the module includes "NOK" if there are any errors. Check for these in the log file.
    #
    echo "checking no NOK in output"
    egrep -i "NOK" ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: NOK found in output"
        return 1
    fi

    # # Check if an interrupt has been trapped
    # #
    echo "checking an interrupt has been trapped"
    egrep -i "Interrupt trapped" ${L_TLOG} > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -eq 1 ]; then
        echo "TEST FAIL: No interrupt found in output"
        return 1
    fi


    # Extract the name of the module log file from the console output file
    echo "Checking for orchestrator logfile in console output"
    LOGF=$(egrep -i "Refer to logfile" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | sed 's/.*Refer to logfile //'  | sed 's/\.log .*/\.log/')

    if [ "${LOGF}" = "" ]; then
        # If no log file name is extracted then the following code is academic so return now.
        echo "ERROR: Module log file name not found in console output."
        return 1
    fi

    # Get details of the module log file dependant on how we are running
    case ${ORCH_CMD_MODE} in
        local)	# Does the log file exist
                test -f ${LOGF}
                L_LOG_EXIST=$?

                # Does the log file have any content
                echo "Checking the module logfile."
                test -s ${LOGF}
                L_LOG_HAS_CONTENT=$?
                
                # Does the status file exist
                test -f ${L_STATUS_FILE}
                L_STATUS_FILE_EXIST=$?

                # Does the status file contain NOK
                echo "Checking the module statusfile."
                test "$(cat ${L_STATUS_FILE})" = "NOK"
                L_STATUS_FILE_OK=$?
                
                # Did the module complete successfully according to the log file
                cat ${LOGF} | grep -i 'module completed successfully'
                L_MODULE_STATUS=$?
				
				# Did the module install a peer package
				egrep -i 'Installation of <ERICpeer> was successful' ${LOGF}
				L_PEER_PKG_STATUS=$?
                ;;
        *)	    # Does the log file exist
                su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"test -f ${LOGF}\""
				L_LOG_EXIST=$?

			    # Does the log file have any content
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"test -s ${LOGF}\""
				L_LOG_HAS_CONTENT=$?

			    # Does the status file exist
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"test -f ${L_STATUS_FILE}\""
				L_STATUS_FILE_EXIST=$?

			    # Does the status file contain NOK
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"test \\\$(cat ${L_STATUS_FILE}) = NOK\""
                L_STATUS_FILE_OK=$?

			    # Did the module complete successfully according to the log file
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"egrep -i 'module completed successfully' ${LOGF}\"" > /dev/null 2>&1
				L_MODULE_STATUS=$?
				
				# Did the module install a peer package
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP \"egrep -i 'Location: /tmp/orc_om_media/peer_tools/peer/ERICpeer.pkg' ${LOGF}\"" > /dev/null 2>&1
				L_PEER_PKG_STATUS=$?


				;;
    esac

	if [ $ORCH_SERVER_TYPE = "PEER" ] && [ $L_PEER_PKG_STATUS -ne 0 ]; then		
		echo "ERROR: No peer package installed"
		return 1
	fi
	

	if [ $ORCH_SERVER_TYPE != "PEER" ] && [ $L_PEER_PKG_STATUS -eq 0 ]; then		
		echo "ERROR: Peer package installed on wrong server"
		return 1
	fi
	
	
	# Exit  with error if the module log file does not exist
	if [ ${L_LOG_EXIST} -ne 0 ]; then
	    echo "ERROR: Log file ${LOGF} does not exist."
		return 1
	fi

	# Exit with error if the module log file has no content.
	if [ ${L_LOG_HAS_CONTENT} -ne 0 ]; then
	    echo "ERROR: Log file ${LOGF} has no content."
		return 1
	fi
    
	# Exit  with error if the module status file does not exist
	if [ ${L_STATUS_FILE_EXIST} -ne 0 ]; then
	    echo "ERROR: Status file ${L_STATUS_FILE} does not exist."
		return 1
	fi

	# Exit with error if the status file does not contain NOK
	if [ ${L_STATUS_FILE_OK} -ne 0 ]; then
	    echo "ERROR: Status file ${L_STATUS_FILE} does not contain 'NOK'."
		return 1
	fi
    

	# Exit with error if the module failed.
	if [ ${L_MODULE_STATUS} -eq 0 ]; then
	    echo "ERROR: Log file ${LOGF} shows the module run succeeded."
		return 1
	fi

    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
	local L_TMP_OUTPUT="/tmp/31018_${AT_JOB}.output"
	
  rm /tmp/pre_tmp31018_${AT_JOB}.log || return 1
	rm "${L_TMP_OUTPUT}" || return 1

  return 0

}
