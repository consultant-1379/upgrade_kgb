#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
 
    L_VAR="/etc/rc3.d/S99slustartfile"
#   echo $L_VAR
#   test -e /etc/rc3.d/S99slustartfile; echo $?
    if ( test -e $L_VAR )
    then
        echo "/rc3.d/S99slustartfile exists. Re-naming existing $L_VAR to $L_VAR.backup for duration of test"
        mv /etc/rc3.d/S99slustartfile /etc/rc3.d/S99slustartfile.backup
    else
        echo "S99slustartfile does not exist. Module proceeds with an OK in UPGRADE_TASKS_INFO"
    fi 

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

#    local L_TMP
    ssh -o StrictHostKeyChecking=no ossrcdm@gateway "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER slu_post_reboot_tasks:server_type=$ORCH_SERVER_TYPE,test1=" | grep 'RC3' | grep -w 'OK'
#   ssh -o StrictHostKeyChecking=no ossrcdm@gateway "fab -H ossmaster -f /tmp/stub.py -u root slu_post_reboot_tasks:server_type=ADMIN,test1="""
#   /var/tmp/Liveupgrade/slu_post_reboot_tasks.bsh ADMIN
#    L_TMP=$?
    echo The module grep command output is $?

	if [ $? -ne 0 ]; then
		echo "post reboot task failed...."
		return 1
	fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
    
    L_VAR="/etc/rc3.d/S99slustartfile.backup"
    #echo $L_VAR
    if ( `test -e $L_VAR` )
    then
        echo "Backed up file exists. Removing backedup file in clean up"
        rm -rf /etc/rc3.d/S99slustartfile.backup        
    else
        echo "No backup file existed. No cleanup required"
    fi
    
    L_TMP="/var/log/ericsson/.slu_reboot_tasks_status_file"
#   echo $L_TMP
#   test -e /var/log/ericsson/.slu_reboot_tasks_status_file; echo $?
    if ( test -e $L_TMP )
    then
        echo "Status file exists. No need to create it for next TC"
    else
        echo "Status file does not exist. Need to create it for next TC" 
        echo "Creating a new status file $L_TMP with an OK for the next test case"
        touch /var/log/ericsson/.slu_reboot_tasks_status_file
        echo "OK" > "/var/log/ericsson/.slu_reboot_tasks_status_file"        
    fi
    
	return 0

}
