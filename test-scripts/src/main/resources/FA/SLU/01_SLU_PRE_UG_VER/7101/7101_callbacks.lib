#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<Details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

    touch /tmp/pre_tmp7101.log || return 1
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

local L_TMP
local L_TMP2
local L_TMP3
local L_FAILS=0
local L_TLOG=/tmp/pre_tmp7101.log
local L_ORCH_LOG=/var/log/ericsson/SLU/slu_pre_upgrade_verification_

# In this test the module runs successfully
echo "MODE is ${ORCH_CMD_MODE} ...... "
echo " "
if [ "${ORCH_CMD_MODE}" = "local" ]; then

echo "Option 1 - run locally on the box"
    /var/tmp/Liveupgrade/slu_pre_upgrade_verification.bsh $ORCH_SERVER_TYPE $CI_MWS_IP $ORCH_SOL_BMEDIA $ORCH_PATCH_PATH | tee ${L_TLOG}

elif [ "${ORCH_CMD_MODE}" = "ssh_fab" ]; then
echo "Option 2 - Run locally on box but ssh back to MWS to Run via Fabric"
    ssh -o StrictHostKeyChecking=no $STUB_USER@$STUB_LOC "fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER slu_pre_upgrade_verification:server_type=$ORCH_SERVER_TYPE,path_to_sol=$ORCH_SOL_BMEDIA,path_to_patch=$ORCH_PATCH_PATH,mws_ip=$CI_MWS_IP,test1=" | tee ${L_TLOG}

elif [ "${ORCH_CMD_MODE}" = "local_fab" ]; then
echo "Option 3 - Run via fabric from MWS"
    fab -H $ORCH_SERVER -f /tmp/stub.py -u $ORCH_USER slu_pre_upgrade_verification:server_type=$ORCH_SERVER_TYPE,path_to_sol=$ORCH_SOL_BMEDIA,path_to_patch=$ORCH_PATCH_PATH,mws_ip=$CI_MWS_IP,test1= | tee ${L_TLOG}

elif [ "${ORCH_CMD_MODE}" = "ssh_frm_mws" ]; then
echo "Option 4 - Run via SSH from MWS"
   su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$ORCH_ISO_IP '/usr/local/bin/sudo /var/tmp/Liveupgrade/slu_pre_upgrade_verification.bsh $ORCH_SERVER_TYPE $CI_MWS_BIP $ORCH_SOL_BMEDIA $ORCH_PATCH_PATH'" | tee ${L_TLOG}
#NOTE: Define these variables in 7100 env file: ORCH_ISO_IP, CI_MWS_BIP   
else 
    echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
    return 1
fi

L_TMP=( ${PIPESTATUS[0]} )

if [ ${L_TMP} -ne 0 ]; then
  echo "TEST FAIL: module did not complete successfully"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking console tee file exists"
ls -al "${L_TLOG}"
if [ ${?} -ne 0 ]; then
  echo "TEST FAIL: console output tee file not found, unable to assess test results"
  return 1
fi

echo "checking for syntax errors etc"
egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
if [ ${?} -eq 0 ]; then
  echo "TEST FAIL: Code Errors were found, please check output."
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking no NOK in output"
# check no NOK in output
egrep -i "NOK" ${L_TLOG}
if [ ${?} -eq 0 ]; then
  echo "TEST FAIL: NOK found in output"
  let "L_FAILS = L_FAILS + 1"
fi

echo "checking logfile referenced in console output"
#check logfile exists - need to grep the logfile name out of the output & do an ls on it
egrep -i "Logfile location:" ${L_TLOG} | egrep -i "${L_ORCH_LOG}"
LOGRES1=${?}

if [ "${ORCH_CMD_MODE}" = "local_fab" ] || [ "${ORCH_CMD_MODE}" = "ssh_fab" ] || [ "${ORCH_CMD_MODE}" = "ssh_frm_mws" ]; then
#if [ "${ORCH_CMD_MODE}" = "local_fab" ] || [ "${ORCH_CMD_MODE}" = "ssh_fab" ]; then


    if [ ${LOGRES1} -ne 0 ]; then
      echo "TEST FAIL: No reference to expected log file in console output"
      let "L_FAILS = L_FAILS + 1"
    else
      echo "checking log file exists"
#      LOGF=`egrep -i "Logfile location:" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | awk '{ print $16 }'`
#      LOGF=`egrep -i "Logfile location:" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | awk '{ print $14 }'`   
       LOGF= `egrep -i "Logfile location:" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | sed 's/.*Logfile location: //'  | sed 's/.log .*/.log/'`
        
      ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER "test -f ${LOGF}"
      if [ ${?} -eq 0 ]; then
         echo "checking logfile not empty"
         ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER "test -s ${LOGF}"
         if [ ${?} -eq 0 ]; then
            echo "checking logfile reports module success"
            ssh -o StrictHostKeyChecking=no root@$ORCH_SERVER "egrep -i 'module completed successfully' ${LOGF}"
            if [ ${?} -ne 0 ]; then
                echo "TEST FAIL: output does not report successful completion"
                let "L_FAILS = L_FAILS + 1"
            fi
         else
            echo "logfile empty"
            let "L_FAILS = L_FAILS + 1"
         fi
      else
         echo "TEST FAIL: Logfile ${LOGF} not found"
         let "L_FAILS = L_FAILS + 1"
      fi
fi




else


#    if [ ${LOGRES1} -ne 0 ] || [ "${ORCH_CMD_MODE}" = "ssh_frm_mws" ]; then
    if [ ${LOGRES1} -ne 0 ]; then    
      echo "TEST FAIL: No reference to expected log file in console output"
      let "L_FAILS = L_FAILS + 1"
    else
      echo "checking log file exists"
      #LOGF=`egrep -i "Logfile location:" ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | awk '{ print $14}'`
      LOGF=`egrep -i "Logfile location:"  ${L_TLOG} | egrep -i "${L_ORCH_LOG}" | sed 's/.*Logfile location: //'  | sed 's/.log .*/.log/'`
      echo "This is the logfile: ${LOGF}"
      if [ -f ${LOGF} ]; then
         echo "checking logfile not empty"
         if [ -s ${LOGF} ]; then
            echo "checking logfile reports module success"
            egrep -i 'module completed successfully' ${LOGF}
            SUCRES=${?}
            if [ ${SUCRES} -ne 0 ]; then
                echo "output of check is ${SUCRES}"
                echo "${LOGF}"
                echo "TEST FAIL: output does not report successful completion"
                let "L_FAILS = L_FAILS + 1"
            fi
         else
            echo "logfile empty"
            let "L_FAILS = L_FAILS + 1"
         fi
      else
         echo "TEST FAIL: Logfile ${LOGF} not found"
         let "L_FAILS = L_FAILS + 1"
      fi
    fi


fi

# grep for each of the checks that are supposed to take place

if [ ${L_FAILS} != 0 ]; then
   echo "TEST FAILS: found ${L_FAILS} problems"
   return 1
else
   echo "no problems found"
   return 0
fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
 
    #    rm -rf /tmp/pre_tmp7101.log || 1
        return 0

}
