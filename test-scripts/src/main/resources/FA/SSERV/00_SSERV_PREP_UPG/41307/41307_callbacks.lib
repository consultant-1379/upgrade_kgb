#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 16.01.15 xgeonew

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup()     # Called only for independent TC execution mode to setup TC
# tc_precon()    # Conditions that should exist before TC can run
# tc_test()    # Runs the test for this TC
# tc_postcon()    # Conditions that should/should not exist after successful TC 
# tc_cleanup()    # Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0  success
# >0   failure

tc_setup() {

  # Coded to fail in case TC_AUTOMATED=1 before automation completed
  # Change return code as required

    touch /tmp/sserv_41307_${AT_JOB}.log || return 1

    #TODO Need to set this to the correct file

    if [ -d "${ORCH_UPGRADE_DIR}/config" ]
    then
      echo "${ORCH_UPGRADE_DIR}/config exists. Re-naming to ${ORCH_UPGRADE_DIR}/config.bkp for duration of test"
      mv ${ORCH_UPGRADE_DIR}/config ${ORCH_UPGRADE_DIR}/config.bkp
    else
      echo "${ORCH_UPGRADE_DIR}/config does not exist... "
    fi  

  return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0  success
# >0   failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	# Checks for expected variables. Exit early if these are not set.
	echo "checking env vars"
	if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
		echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
	fi

	if [ "${ORCH_OMSAS_MEDIA}xxx" = "xxx" ]; then
			echo "Variable ORCH_OMSAS_MEDIA is not set. Check your environment file"
			return 1
		else 
			echo "ORCH_OMSAS_MEDIA: ${ORCH_OMSAS_MEDIA}"
	fi
	
	if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
		echo "Variable ORCH_TYPE is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_TYPE: ${ORCH_TYPE}"
	fi

	if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
		echo "Variable ORCH_SERVER is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_SERVER: ${ORCH_SERVER}"
	fi

	ssh root@$ORCH_SERVER -C 'echo "OK" > "/var/ericsson/log/.sserv_post_upgrade_tasks_status_file"'
	retVal=$?
	if [ ${retVal} -ne 0 ]; then
		echo "TEST FAIL: Could not set up sserv_post_upgrade_tasks_status_file with OK"
        return 1
    fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE   success
# != SPEC_TC_TEST_PASSCODE   failure
 
tc_test() {
#module will pass
    local L_TMP
    local L_TLOG=/tmp/sserv_41307_${AT_JOB}.log
    local L_ORCH_LOG=/ericsson/orchestrator/log/sserv_prepare_for_upgrade_
    local L_LOG_EXIST
    local L_LOG_HAS_CONTENT
    local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
    local L_ORCH_CMD_MODE="local"

    #############################################################################
    #
    # Run the om_prepare_for_upgrade.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################

    # In this test the module runs successfully
    echo "MODE changed explicitly for this TC"
    echo "MODE is ${L_ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
    case ${L_ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     case ${ORCH_TYPE} in
					VAPP|SINGLE)    su - orcha /ericsson/orchestrator/bin/sserv_prepare_for_upgrade.bsh $ORCH_OMSAS_MEDIA $ORCH_SERVER | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
                        ;;
					CLUSTER)        su - orcha /ericsson/orchestrator/bin/sserv_prepare_for_upgrade.bsh $ORCH_OMSAS_MEDIA $ORCH_SERVER | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
                        ;;
                     esac
           ;;
  
        *)         echo "ORCH_CMD_MODE should be overridden to local for this test, but was set to ${L_ORCH_CMD_MODE}" 
                   #echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                   return 1
                   ;;
    esac

    if [ ${L_TMP} -ne 0 ]; then
        echo "TEST FAIL: module did not complete successfully"
    return 1
    fi

    # Check that the logfile created above exists
    #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 1
    fi

    # Check to see if any commands failed during execution of the module
    #
    echo "checking for syntax errors etc"
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Code Errors were found, please check output."
        return 1
    fi

    # Output from the module includes "NOK" if there are any errors. Check for these in the log file.
    #
    echo "checking no NOK in output"
    egrep -i "NOK" ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: NOK found in output"
        return 1
    fi
	
	echo "checking for clean-up of previous status file"
    egrep -i "Previous successful upgrade status file deleted for" ${L_TLOG}
    retVal=$?
	if [ ${retVal} -ne 0 ]; then
		echo "TEST FAIL: Previous successful upgrade status file deletion not found in output"
        return 1
    fi

    # Extract the name of the module log file from the console output file
    echo "Checking for orchestrator logfile in console output"
    LOGF=$(cat ${L_TLOG} | egrep -i "Logfile location:" | egrep -i "${L_ORCH_LOG}" | sed 's/.*Logfile location: //'  | sed 's/.log .*/.log/')

    if [ "${LOGF}" = "" ]; then
        # If no log file name is extracted then the following code is academic so return now.
        echo "ERROR: Module log file name not found in console output."
        return 1
    fi

    # Get details of the module log file dependant on how we are running
    case ${L_ORCH_CMD_MODE} in
        local)  # Does the log file exist
                test -f ${LOGF}
                L_LOG_EXIST=$?

                # Does the log file have any content
                echo "Checking the module logfile."
                test -s ${LOGF}
                L_LOG_HAS_CONTENT=$?
                
                # Did the module complete successfully according to the log file
                cat ${LOGF} | grep -i 'module completed successfully'
                L_MODULE_STATUS=$?
                ;;
        *)      # Does the log file exist
                su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"test -f ${LOGF}\""
				L_LOG_EXIST=$?

				  # Does the log file have any content
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"test -s ${LOGF}\""
				L_LOG_HAS_CONTENT=$?

				  # Did the module complete successfully according to the log file
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"egrep -i 'module completed successfully' ${LOGF}\"" > /dev/null 2>&1
				L_MODULE_STATUS=$?
        ;;
    esac

  # Exit  with error if the module log file does not exist
  if [ ${L_LOG_EXIST} -ne 0 ]; then
      echo "ERROR: Log file ${LOGF} does not exist."
    return 1
  fi

  # Exit with error if the module log file has no content.
  if [ ${L_LOG_HAS_CONTENT} -ne 0 ]; then
      echo "ERROR: Log file ${LOGF} has no content."
    return 1
  fi
    
  # Exit with error if the module failed.
  if [ ${L_MODULE_STATUS} -ne 0 ]; then
      echo "ERROR: Log file ${LOGF} show the module run failed."
    return 1
  fi

    return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0  success
# >0   failure

tc_postcon() {

  # Coded to fail in case TC_AUTOMATED=1 before automation complete.
  # Change return code as required

    # For TC's that are run on MWS only reinstate the ORCH_CMD_MODE variable
  #export ORCH_CMD_MODE=${OLD_ORCH_CMD_MODE}
  #echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
  return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0  success
# >0   failure

tc_cleanup() {

  # Coded to fail in case TC_AUTOMATED=1 before automation complete
  # Change return code as required
 
    local rc=0

    rm /tmp/sserv_41307_${AT_JOB}.log || rc=1

    #TODO Need to set the files back to how they were.

    if [ -d "${ORCH_UPGRADE_DIR}/config.bkp" ]
    then
        echo "${ORCH_UPGRADE_DIR}/config.bkp exists. Re-naming back to ${ORCH_UPGRADE_DIR}/config"
        mv ${ORCH_UPGRADE_DIR}/config.bkp ${ORCH_UPGRADE_DIR}/config
    fi  
 
    return $rc

}
