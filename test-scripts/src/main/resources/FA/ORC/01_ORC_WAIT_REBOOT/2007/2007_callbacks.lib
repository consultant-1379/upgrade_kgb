#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
  touch /tmp/pre_tmp2007_${AT_JOB}.log || return 1
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
    # Checks for expected variables. Exit early if these are not set.
	if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
	    echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
		return 1
  else echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
	fi

	#if [ "${ORCH_OM_MEDIA_DIR}xxx" = "xxx" ]; then
	#    echo "Variable ORCH_OM_MEDIA_DIR is not set. Check your environment file"
	#	return 1
  # else echo "ORCH_OM_MEDIA_DIR: ${ORCH_OM_MEDIA_DIR}"
	#fi

	if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
	    echo "Variable ORCH_TYPE is not set. Check your environment file"
		return 1
  else echo "ORCH_TYPE: ${ORCH_TYPE}"
	fi
  case ${ORCH_TYPE} in
	      SINGLE|VAPP)   if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
                             echo "Variable ORCH_SERVER  is not set. Check your environment file"
                             return 1
                       else echo "ORCH_SERVER: ${ORCH_SERVER}"
                       fi
										   ;;
        CLUSTER)       if [ "${ORCH_ISO_IP}xxx" = "xxx" ]; then
                             echo "Variable ORCH_ISO_IP  is not set. Check your environment file"
                             return 1
                       else echo "ORCH_ISO_IP: ${ORCH_ISO_IP}"
                       fi
                       ;;
              *)       echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					             return 1
                       ;;
	esac 
          
# need to manipulate files on the target server 
    local L_TARGET
    case ${ORCH_TYPE} in
	      SINGLE|VAPP)   L_TARGET=${ORCH_SERVER}
										   ;;
        CLUSTER)       L_TARGET=${ORCH_ISO_IP}
                       ;;
              *)       echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					             return 1
                       ;;
	  esac 
    ssh -o StrictHostKeyChecking=no root@$L_TARGET 'L_VAR="/tmp/.eric_server_going_down"; if [ -f $L_VAR ] ; then echo "$L_VAR exists. Moving to backup"; mv $L_VAR  $L_VAR.backup; else  echo "no $L_VAR file present" ; fi; L_VAR="/tmp/.eric_server_starting_up"; if [ -f $L_VAR ] ; then echo "$L_VAR exists. Moving to backup"; mv $L_VAR  $L_VAR.backup; else  echo "no $L_VAR file present" ; fi;'
  
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
# module will fail because neither .eric_server_going_down nor .eric_server_starting_up exist on target server
# note that we need attempts > 1 to get the expected error msg
    local -i retVal
    local L_TLOG=/tmp/pre_tmp2005_${AT_JOB}.log
    local L_TMP
    local L_ORCH_LOG=/ericsson/orchestrator/log/orc_wait_for_reboot_
    local L_STATUS_FILE=/var/log/ericsson/.slu_reboot_tasks_status_file
	  local L_LOG_EXIST
	  local L_LOG_HAS_CONTENT
	  local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
	  local L_ORCH_CMD_MODE="local"

	  echo "MODE changed explicitly for this TC"
    echo "MODE is ${L_ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
    case ${L_ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     case ${ORCH_TYPE} in
                         VAPP|SINGLE)    echo "Option 1 - run locally on a vApp"
                         su - orcha /ericsson/orchestrator/bin/orc_wait_for_reboot.bsh -N 2 $ORCH_SERVER | tee -a ${L_TLOG}
                         L_TMP=( ${PIPESTATUS[0]} )
                         ;;
                         CLUSTER)        echo "Option 2 - Run locally on harware cluster"
                                         su - orcha /ericsson/orchestrator/bin/orc_wait_for_reboot.bsh -N 2 $ORCH_ISO_IP | tee -a ${L_TLOG}
                                         L_TMP=( ${PIPESTATUS[0]} )
                                         ;;
                         *)              echo "You have not selected an ORCH_TYPE correctly in your Environment File."
                                         return 1
                                         ;;
                      esac
                      ;;
        *)           echo "ORCH_CMD_MODE should be overridden to local for this test, but was set to ${L_ORCH_CMD_MODE}"
                     return 1
                     ;;
    esac
    #egrep -i 'UPGRADE_TASKS_ERROR: Maximum number of attempts \(2\) reached. Indeterminate run state. Neither startup or shutdown file was found \[NOK\]' ${L_TLOG}
    #L_TMP1=( ${?} )
    egrep -i 'ERROR Indeterminate run state. Neither startup or shutdown file was found on server' ${L_TLOG}
    L_TMP2=( ${?} )

    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    L_TMP3=( ${?} )

   if [ ${L_TMP} -ne 1 ]; then
      echo "Test fail: test should have returned a failure code of 1, but returned ${L_TMP}"
      return 1
   else 
      echo "module failed as expected"
   fi
   #if [ ${L_TMP1} -ne 0 ]; then
   #   echo "Test fail: Match not found for expected error message"
   #   return 1
   #else 
   #   echo "expected error message found"
   #fi
   if [ ${L_TMP2} -ne 0 ]; then
      echo "Test fail: Match not found for expected indeterminate state transient error message"
      return 1
   else 
      echo "expected error message found"
   fi
   if [ ${L_TMP3} -eq 0 ]; then
      echo "Test fail: Code errors found"
      return 1
   else 
      echo "no code errors found"
   fi

   return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
    local L_TARGET
    case ${ORCH_TYPE} in
	      SINGLE|VAPP)   L_TARGET=${ORCH_SERVER}
										   ;;
        CLUSTER)       L_TARGET=${ORCH_ISO_IP}
                       ;;
              *)       echo "You have not selected an ORCH_TYPE correctly in your Environment File."
					             return 1
                       ;;
	  esac 
        ssh -o StrictHostKeyChecking=no root@$L_TARGET 'L_VAR="/tmp/.eric_server_going_down"; rm -rf $L_VAR; if [ -f $L_VAR.backup ] ; then echo "$L_VAR.backup exists. Reinstating"; mv $L_VAR.backup  $L_VAR; else  echo "no $L_VAR.backup file present" ; fi; L_VAR="/tmp/.eric_server_starting_up"; if [ -f $L_VAR.backup ] ; then echo "$L_VAR.backup exists. Reinstating"; mv $L_VAR.backup  $L_VAR; else  echo "no $L_VAR.backup file present" ; fi;'
   
    rm /tmp/pre_tmp2005_${AT_JOB}.log || return 1
	return 0

}

