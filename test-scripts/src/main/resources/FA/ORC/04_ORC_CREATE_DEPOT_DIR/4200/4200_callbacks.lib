#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    touch /tmp/orc_4200_${AT_JOB}.log || return 1
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	echo "checking env vars"
	if [ "${ORCH_CMD_MODE}xxx" = "xxx" ]; then
		echo "Variable ORCH_CMD_MODE is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_CMD_MODE: ${ORCH_CMD_MODE}"
	fi

	if [ "${ORCH_OM_MEDIA_DIR}xxx" = "xxx" ]; then
		echo "Variable ORCH_OM_MEDIA_DIR is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_OM_MEDIA_DIR: ${ORCH_OM_MEDIA_DIR}"
	fi

	if [ "${ORCH_COMINF_MEDIA}xxx" = "xxx" ]; then
			echo "Variable ORCH_COMINF_MEDIA is not set. Check your environment file"
			return 1
		else 
			echo "ORCH_COMINF_MEDIA: ${ORCH_COMINF_MEDIA}"
	fi
	
	if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
		echo "Variable ORCH_TYPE is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_TYPE: ${ORCH_TYPE}"
	fi

	if [ "${ORCH_SERVER}xxx" = "xxx" ]; then
		echo "Variable ORCH_SERVER is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_SERVER: ${ORCH_SERVER}"
	fi

	if [ "${ORCH_ISO_IP}xxx" = "xxx" ]; then
		echo "Variable ORCH_ISO_IP is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_ISO_IP: ${ORCH_ISO_IP}"
	fi
	
	if [ "${ORCH_UPGRADE_DIR}xxx" = "xxx" ]; then
		echo "Variable ORCH_UPGRADE_DIR is not set. Check your environment file"
		return 1
	else 
		echo "ORCH_UPGRADE_DIR: ${ORCH_UPGRADE_DIR}"
	fi

	if [[ -d ${ORCH_UPGRADE_DIR} ]] ; then
		echo "found that the depo already exists. Removing Directory ${ORCH_UPGRADE_DIR}"
		rm -r "${ORCH_UPGRADE_DIR}" || return 1
	fi
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    local L_TMP
    local L_TLOG=/tmp/orc_4200_${AT_JOB}.log
    local L_ORCH_LOG=/ericsson/orchestrator/log/orc_create_rep_dir_
    local L_LOG_EXIST
    local L_LOG_HAS_CONTENT
    local L_MODULE_STATUS
    local L_STATUS_FILE_EXIST
    local L_ORCH_CMD_MODE="local"
	local L_DEPO="$(echo ${ORCH_UPGRADE_DIR} | cut -d '/' -f 6-10)"
	local L_BASE_DIR="$(echo ${ORCH_UPGRADE_DIR} | cut -d '/' -f 4-5)"
    #############################################################################
    #
    # Run the om_prepare_for_upgrade.bsh module, dependent on the type of
    # environment we are working in
    #
    #############################################################################

    #NOTE: Define these variables in 30100 env file: ORCH_ISO_IP, CI_MWS_BIP   
    # In this test the module runs successfully
    echo "MODE changed explicitly for this TC"
    echo "MODE is ${L_ORCH_CMD_MODE} ...... "
    echo "temporary tee file is ${L_TLOG}"
    echo " "
	echo "Test case attempting to create Local Depo: ${L_DEPO}"
	
    case ${L_ORCH_CMD_MODE} in 
        local)       echo "Option 1 - run locally on the box"
                     case ${ORCH_TYPE} in
					VAPP|SINGLE)    
								echo "Calling su - orcha /ericsson/orchestrator/bin/orc_create_rep_dir.bsh -b ${L_BASE_DIR} ${L_DEPO}"
								su - orcha /ericsson/orchestrator/bin/orc_create_rep_dir.bsh -b "${L_BASE_DIR}" "${L_DEPO}" | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
								                        ;;
					CLUSTER)    
								echo "Calling su - orcha /ericsson/orchestrator/bin/orc_create_rep_dir.bsh -b ${L_BASE_DIR} ${L_DEPO}"
								su - orcha /ericsson/orchestrator/bin/orc_create_rep_dir.bsh -b "${L_BASE_DIR}" "${L_DEPO}" | tee ${L_TLOG}
                                L_TMP=( ${PIPESTATUS[0]} )
                        ;;
                     esac
           ;;
  
        *)         echo "ORCH_CMD_MODE should be overridden to local for this test, but was set to ${L_ORCH_CMD_MODE}" 
                   #echo "You have not selected an ORCH_CMD_MODE correctly in your Environment File."
                   return 1
                   ;;
    esac

	
	if [ ${L_TMP} -ne 0 ]; then
        echo "TEST FAIL: module did not complete successfully"
		return 1
    fi

    # Check that the logfile created above exists
    #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 1
    fi
	
	# Extract the name of the module log file from the console output file
    echo "Checking for orchestrator logfile in console output"
    LOGF=$(cat ${L_TLOG} | egrep -i "Logfile location:" | egrep -i "${L_ORCH_LOG}" | sed 's/.*Logfile location: //'  | sed 's/.log .*/.log/')

    if [ "${LOGF}" = "" ]; then
        # If no log file name is extracted then the following code is academic so return now.
        echo "ERROR: Module log file name not found in console output."
        return 1
    fi
	
	case ${L_ORCH_CMD_MODE} in
        local)  # Does the log file exist
                test -f ${LOGF}
                L_LOG_EXIST=$?

                # Does the log file have any content
                echo "Checking the module logfile."
                test -s ${LOGF}
                L_LOG_HAS_CONTENT=$?
                
                # Did the module complete successfully according to the log file
                cat ${LOGF} | grep -i 'module completed successfully'
                L_MODULE_STATUS=$?
                ;;
        *)      # Does the log file exist
                su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"test -f ${LOGF}\""
				L_LOG_EXIST=$?

				  # Does the log file have any content
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"test -s ${LOGF}\""
				L_LOG_HAS_CONTENT=$?

				  # Did the module complete successfully according to the log file
				su - orcha -c "ssh -o StrictHostKeyChecking=no orcha@$CI_MWS_BIP \"egrep -i 'module completed successfully' ${LOGF}\"" > /dev/null 2>&1
				L_MODULE_STATUS=$?
        ;;
    esac
	
	

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rm /tmp/orc_4200_${AT_JOB}.log || return 1

    return 0

}
