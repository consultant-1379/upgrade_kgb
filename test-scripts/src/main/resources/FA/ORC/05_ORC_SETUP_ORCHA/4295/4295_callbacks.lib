#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>    <signum>    <details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup()         # Called only for independent TC execution mode to setup TC
# tc_precon()        # Conditions that should exist before TC can run
# tc_test()        # Runs the test for this TC
# tc_postcon()        # Conditions that should/should not exist after successful TC 
# tc_cleanup()        # Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0    success
# >0     failure

tc_setup() {

    # Coded to fail in case TC_AUTOMATED=1 before automation completed
    # Change return code as required
    
    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0    success
# >0     failure
 
tc_precon() {

    # Coded to fail in case TC_AUTOMATED=1 before automation completed
    # Change return code as required
  echo "checking env vars"
  if [ "${ORCH_TYPE}xxx" = "xxx" ]; then
        echo "Variable ORCH_TYPE is not set. Check your environment file"
        return 1
  else echo "ORCH_TYPE: ${ORCH_TYPE}"
  fi
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE     success
# != SPEC_TC_TEST_PASSCODE     failure
 
tc_test() {

    local RC=0
    local L_LOG
    local L_RES
    local ii

    local TMPF=/tmp/4295in.$$
    local TMPOUT=/tmp/4295out.$$

    rm -f $TMPF

    if [ "${ORCH_TYPE}" = "VAPP" ]; then
        local LIST_SERV

        # On VAPP, check error message - get uas1 type wrong, and remove user on ebas
        echo "EBAS,ebas,shroot" > $TMPF
        su - orcha -c "/ericsson/orchestrator/bin/setup_orcha_user.bsh -r -f $TMPF 2>&1" | tee $TMPOUT
        L_RES=${PIPESTATUS[0]}

        if [ $L_RES -ne 0 ]; then
            echo "ERROR: failed to remove orcha user on ebas host"
            RC=1
        else

            # ebas orcha user removed, so check error codes
            echo "MWS,mws," > $TMPF
            echo "UAS,omsas," >> $TMPF
            echo "EBAS,ebas," >> $TMPF

            echo "Testing that invalid host types are correctly recognised"

            su - orcha -c "/ericsson/orchestrator/bin/setup_orcha_user.bsh -c -f $TMPF 2>&1" | tee $TMPOUT
            L_RES=${PIPESTATUS[0]}

            if [ $L_RES -eq 0 ]; then
                echo "ERROR: Got 0 return code with invalid host file"
                RC=1
            fi

            # Check the messages are in screen output
            if ! grep "Successfully connected via SSH to host mws of server type .mws." $TMPOUT >/dev/null ; then
                echo "ERROR: no connection line in screen output for host mws"
                RC=1
            fi
            if ! grep "ERROR: Host omsas should be UAS, but it returns infra_omsas" $TMPOUT >/dev/null ; then
                echo "ERROR: no line in screen output reporting incorrect type for host omsas"
                RC=1
            fi
            if ! grep "ERROR: Failed to connect via SSH to host ebas" $TMPOUT >/dev/null ; then
                echo "ERROR: no failed connection line in screen output for host ebas"
                RC=1
            fi

            # now reinstate orcha user on ebas node
            echo "EBAS,ebas,shroot" > $TMPF
            su - orcha -c "ORC_SSH_INTERACTIVE=1 /ericsson/orchestrator/bin/setup_orcha_user.bsh -p 'Orch@12A' -f $TMPF 2>&1" | tee $TMPOUT
            L_RES=${PIPESTATUS[0]}
            if [ $L_RES -ne 0 ]; then
                echo "ERROR: failed to reinstate orcha user on ebas host"
                RC=1
            fi

            rm -f $TMPF $TMPOUT
        fi
    else
        echo "ORCH_TYPE ${ORCH_TYPE} must be VAPP for this test, so skipping"
        RC=0
    fi

    return $RC

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0    success
# >0     failure

tc_postcon() {

    # Coded to fail in case TC_AUTOMATED=1 before automation complete.
    # Change return code as required

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0    success
# >0     failure

tc_cleanup() {

    # Coded to fail in case TC_AUTOMATED=1 before automation complete
    # Change return code as required

    return 0

}
