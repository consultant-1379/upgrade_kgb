#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    # Coded to fail in case TC_AUTOMATED=1 before automation completed
    # Change return code as required
    touch /tmp/tmp_4100_${AT_JOB}.log || return 1
    echo "checking env vars"
    if [ "${ORCH_OSSRC_MEDIA}xxx" = "xxx" ]; then
        echo "Variable ORCH_OSSRC_MEDIA is not set. Check your environment file"
        return 1
    else
        echo "ORCH_OSSRC_MEDIA: ${ORCH_OSSRC_MEDIA}"
    fi

    if [ -f ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/update_orchupg.bsh ];
    then
       echo "File ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/update_orchupg.bsh exists."
       if [ -f ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/ERICorchupg.pkg ];
       then
           echo "Package ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/ERICorchupg.pkg exists"
           return 0
       else
           echo "Package ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/ERICorchupg.pkg does not exist"
           return 1
       fi
    else
       echo "File ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/update_orchupg.bsh does not exist."
       return 1
    fi

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

local L_TMP3
local L_TLOG=/tmp/tmp_4100_${AT_JOB}.log
echo "temporary tee file is ${L_TLOG}"
ORCH_OSSRC_MEDIA="${ORCH_OSSRC_MEDIA}xxx"
${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/update_orchupg.bsh ${ORCH_OSSRC_MEDIA}ossrc_base_sw/inst_config/i386/upgrade/ | tee ${L_TLOG}

L_TMP3=( ${PIPESTATUS[0]} )


    if [ ${L_TMP3} -eq 0 ]; then
        echo "TEST FAIL: module did not detect bad incorrect path to OSSRC depot successfully"
        return 0
    fi

    #
    echo "checking console tee file exists"
    ls "${L_TLOG}" > /dev/null 2>&1
    retVal=$?
    if [ ${retVal} -ne 0 ]; then
        echo "TEST FAIL: console output tee file not found, unable to assess test results"
        return 0
    fi

    # Check to see if any commands failed during execution of the module
    #
    egrep -i 'ambiguous redirect|Syntax error|unexpected token|parse error|Permission denied|Undefined variable|Stale NFS' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Code Errors were found, please check output."
        return 0
    fi

    # Output from the module includes "NOK" if there are any errors. Check for these in the log file.
    #
    echo "checking no NOK in output"
    egrep -i 'NOK' ${L_TLOG}
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: NOK was not found in output"
        return 0
    fi
	
    egrep -i 'matches the version of the package being installed. No upgrade required' ${L_TLOG}
    retVal=$?
    if [ ${retVal} -eq 0 ]; then
        echo "TEST FAIL: Attempted to install the same package on top of itself"
        return 0
    fi
	
	
    return 1



}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    # Coded to fail in case TC_AUTOMATED=1 before automation complete
    # Change return code as required
    if [ -f /tmp/tmp_4100_${AT_JOB}.log ];
    then
        rm -rf /tmp/tmp_4100_${AT_JOB}.log
    fi
    return 0

}
